
AD_Wandler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fe4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000076  00800060  00000fe4  00001058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000014b8  00000000  00000000  000010d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000021a  00000000  00000000  00002588  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000027a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000270  00000000  00000000  00002822  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ced  00000000  00000000  00002a92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000042a  00000000  00000000  0000377f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f25  00000000  00000000  00003ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  00004ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c0  00000000  00000000  00004d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000afa  00000000  00000000  00005120  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000094  00000000  00000000  00005c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  00005cae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
   4:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
   8:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
   c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  10:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  14:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  18:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  1c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  20:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  24:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  28:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  2c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  30:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  34:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  38:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  3c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  40:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  44:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  48:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  4c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  50:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  54:	00 40       	sbci	r16, 0x00	; 0
  56:	7a 10       	cpse	r7, r10
  58:	f3 5a       	subi	r31, 0xA3	; 163
  5a:	00 a0       	ldd	r0, Z+32	; 0x20
  5c:	72 4e       	sbci	r23, 0xE2	; 226
  5e:	18 09       	sbc	r17, r8
  60:	00 10       	cpse	r0, r0
  62:	a5 d4       	rcall	.+2378   	; 0x9ae <usart_putui_bin+0x56>
  64:	e8 00       	.word	0x00e8	; ????
  66:	00 e8       	ldi	r16, 0x80	; 128
  68:	76 48       	sbci	r23, 0x86	; 134
  6a:	17 00       	.word	0x0017	; ????
  6c:	00 e4       	ldi	r16, 0x40	; 64
  6e:	0b 54       	subi	r16, 0x4B	; 75
  70:	02 00       	.word	0x0002	; ????
  72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
  74:	9a 3b       	cpi	r25, 0xBA	; 186
  76:	00 00       	nop
  78:	00 e1       	ldi	r16, 0x10	; 16
  7a:	f5 05       	cpc	r31, r5
  7c:	00 00       	nop
  7e:	80 96       	adiw	r24, 0x20	; 32
  80:	98 00       	.word	0x0098	; ????
  82:	00 00       	nop
  84:	40 42       	sbci	r20, 0x20	; 32
  86:	0f 00       	.word	0x000f	; ????
  88:	00 00       	nop
  8a:	a0 86       	std	Z+8, r10	; 0x08
  8c:	01 00       	.word	0x0001	; ????
  8e:	00 00       	nop
  90:	10 27       	eor	r17, r16
  92:	00 00       	nop
  94:	00 00       	nop
  96:	e8 03       	fmulsu	r22, r16
  98:	00 00       	nop
  9a:	00 00       	nop
  9c:	64 00       	.word	0x0064	; ????
  9e:	00 00       	nop
  a0:	00 00       	nop
  a2:	0a 00       	.word	0x000a	; ????
  a4:	00 00       	nop
  a6:	00 00       	nop
  a8:	01 00       	.word	0x0001	; ????
  aa:	00 00       	nop
  ac:	00 00       	nop
  ae:	2c 76       	andi	r18, 0x6C	; 108
  b0:	d8 88       	ldd	r13, Y+16	; 0x10
  b2:	dc 67       	ori	r29, 0x7C	; 124
  b4:	4f 08       	sbc	r4, r15
  b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
  b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
  ba:	ae 59       	subi	r26, 0x9E	; 158
  bc:	e1 b1       	in	r30, 0x01	; 1
  be:	b7 96       	adiw	r30, 0x27	; 39
  c0:	e5 e3       	ldi	r30, 0x35	; 53
  c2:	e4 53       	subi	r30, 0x34	; 52
  c4:	c6 3a       	cpi	r28, 0xA6	; 166
  c6:	e6 51       	subi	r30, 0x16	; 22
  c8:	99 76       	andi	r25, 0x69	; 105
  ca:	96 e8       	ldi	r25, 0x86	; 134
  cc:	e6 c2       	rjmp	.+1484   	; 0x69a <send_adc+0x60>
  ce:	84 26       	eor	r8, r20
  d0:	eb 89       	ldd	r30, Y+19	; 0x13
  d2:	8c 9b       	sbis	0x11, 4	; 17
  d4:	62 ed       	ldi	r22, 0xD2	; 210
  d6:	40 7c       	andi	r20, 0xC0	; 192
  d8:	6f fc       	.word	0xfc6f	; ????
  da:	ef bc       	out	0x2f, r14	; 47
  dc:	9c 9f       	mul	r25, r28
  de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
  e0:	ba a5       	ldd	r27, Y+42	; 0x2a
  e2:	6f a5       	ldd	r22, Y+47	; 0x2f
  e4:	f4 90       	lpm	r15, Z+
  e6:	05 5a       	subi	r16, 0xA5	; 165
  e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
  ea:	5c 93       	st	X, r21
  ec:	6b 6c       	ori	r22, 0xCB	; 203
  ee:	f9 67       	ori	r31, 0x79	; 121
  f0:	6d c1       	rjmp	.+730    	; 0x3cc <send_ddrd+0x4>
  f2:	1b fc       	.word	0xfc1b	; ????
  f4:	e0 e4       	ldi	r30, 0x40	; 64
  f6:	0d 47       	sbci	r16, 0x7D	; 125
  f8:	fe f5       	brtc	.+126    	; 0x178 <__bad_interrupt>
  fa:	20 e6       	ldi	r18, 0x60	; 96
  fc:	b5 00       	.word	0x00b5	; ????
  fe:	d0 ed       	ldi	r29, 0xD0	; 208
 100:	90 2e       	mov	r9, r16
 102:	03 00       	.word	0x0003	; ????
 104:	94 35       	cpi	r25, 0x54	; 84
 106:	77 05       	cpc	r23, r7
 108:	00 80       	ld	r0, Z
 10a:	84 1e       	adc	r8, r20
 10c:	08 00       	.word	0x0008	; ????
 10e:	00 20       	and	r0, r0
 110:	4e 0a       	sbc	r4, r30
 112:	00 00       	nop
 114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
 116:	0c 33       	cpi	r16, 0x3C	; 60
 118:	33 33       	cpi	r19, 0x33	; 51
 11a:	33 0f       	add	r19, r19
 11c:	98 6e       	ori	r25, 0xE8	; 232
 11e:	12 83       	std	Z+2, r17	; 0x02
 120:	11 41       	sbci	r17, 0x11	; 17
 122:	ef 8d       	ldd	r30, Y+31	; 0x1f
 124:	21 14       	cp	r2, r1
 126:	89 3b       	cpi	r24, 0xB9	; 185
 128:	e6 55       	subi	r30, 0x56	; 86
 12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
 12c:	fe e6       	ldi	r31, 0x6E	; 110
 12e:	db 18       	sub	r13, r11
 130:	d1 84       	ldd	r13, Z+9	; 0x09
 132:	4b 38       	cpi	r20, 0x8B	; 139
 134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
 136:	7c 1d       	adc	r23, r12
 138:	90 1d       	adc	r25, r0
 13a:	a4 bb       	out	0x14, r26	; 20
 13c:	e4 24       	eor	r14, r4
 13e:	20 32       	cpi	r18, 0x20	; 32
 140:	84 72       	andi	r24, 0x24	; 36
 142:	5e 22       	and	r5, r30
 144:	81 00       	.word	0x0081	; ????
 146:	c9 f1       	breq	.+114    	; 0x1ba <ADC_Read_Avg+0x10>
 148:	24 ec       	ldi	r18, 0xC4	; 196
 14a:	a1 e5       	ldi	r26, 0x51	; 81
 14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
 14e:	11 24       	eor	r1, r1
 150:	1f be       	out	0x3f, r1	; 63
 152:	cf e5       	ldi	r28, 0x5F	; 95
 154:	d8 e0       	ldi	r29, 0x08	; 8
 156:	de bf       	out	0x3e, r29	; 62
 158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
 15a:	10 e0       	ldi	r17, 0x00	; 0
 15c:	a0 e6       	ldi	r26, 0x60	; 96
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	e4 ee       	ldi	r30, 0xE4	; 228
 162:	ff e0       	ldi	r31, 0x0F	; 15
 164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
 166:	05 90       	lpm	r0, Z+
 168:	0d 92       	st	X+, r0
 16a:	a6 3d       	cpi	r26, 0xD6	; 214
 16c:	b1 07       	cpc	r27, r17
 16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>
 170:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <main>
 174:	0c 94 f0 07 	jmp	0xfe0	; 0xfe0 <_exit>

00000178 <__bad_interrupt>:
 178:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000017c <ADC_Init>:
/* ADC initialisieren */
void ADC_Init(void)
{
	uint16_t result;

	ADMUX = (0<<REFS1) | (1<<REFS0); // AVcc (5V) als Referenz festlegen
 17c:	80 e4       	ldi	r24, 0x40	; 64
 17e:	87 b9       	out	0x07, r24	; 7
	//ADMUX = (1<<REFS1) | (1<<REFS0); // interne Referenzspannung benutzen

	// Da Bit ADFR (free running) in Register ADCSRA beim Einschalten
	// schon auf 0 steht, befindet sich der Controller im single conversion Modus
	ADCSRA  = (1<<ADPS1) | (1<<ADPS0); // Frequenzvorteiler einstellen
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADEN); // ADC wird aktiviert
 184:	37 9a       	sbi	0x06, 7	; 6

	/* Wird der ADC aktiviert, sollte ein ein "Dummy-Readout" durchgeführt werden.
	Ein Wert wird also gelesen und direkt verworfen, damit der ADC "warmlaufen kann" */
	ADCSRA |= (1<<ADSC); // eine ADC-Wandlung durchführen
 186:	36 9a       	sbi	0x06, 6	; 6

	while (ADCSRA & (1<<ADSC)) {} // Warte auf Abschluss der Konvertierung
 188:	36 99       	sbic	0x06, 6	; 6
 18a:	fe cf       	rjmp	.-4      	; 0x188 <ADC_Init+0xc>

	/* ADCW muss ausgelesen werden, damit das Ergebnis der nächsten
	Wandlung übernommen werden kann. */
	result = ADCW;
 18c:	84 b1       	in	r24, 0x04	; 4
 18e:	95 b1       	in	r25, 0x05	; 5
}
 190:	08 95       	ret

00000192 <ADC_Read>:

/* ADC Einzelmessung durchführen */
uint16_t ADC_Read(uint8_t channel)
{
	// Auswahl des Kanals, andere Bits dabei nicht beeinflussen
	ADMUX = (ADMUX & ~(0x1F)) | (channel & 0x1F);
 192:	97 b1       	in	r25, 0x07	; 7
 194:	8f 71       	andi	r24, 0x1F	; 31
 196:	90 7e       	andi	r25, 0xE0	; 224
 198:	89 2b       	or	r24, r25
 19a:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC); // Durchführen einer Wandlung im "single conversion" Modus
 19c:	36 9a       	sbi	0x06, 6	; 6

	while (ADCSRA & (1<<ADSC)) {} // Warten bis Konvertierung abgeschlossen ist
 19e:	36 99       	sbic	0x06, 6	; 6
 1a0:	fe cf       	rjmp	.-4      	; 0x19e <ADC_Read+0xc>

	return ADCW; // Auslesen und zurückgeben des ADC als ganzes Wort
 1a2:	24 b1       	in	r18, 0x04	; 4
 1a4:	35 b1       	in	r19, 0x05	; 5
}
 1a6:	c9 01       	movw	r24, r18
 1a8:	08 95       	ret

000001aa <ADC_Read_Avg>:

/* Mehrfachmessung mit Mittelwertbbildung durchführen */
uint16_t ADC_Read_Avg(uint8_t channel, uint8_t average)
{
 1aa:	bf 92       	push	r11
 1ac:	cf 92       	push	r12
 1ae:	df 92       	push	r13
 1b0:	ef 92       	push	r14
 1b2:	ff 92       	push	r15
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	d8 2e       	mov	r13, r24
 1ba:	b6 2e       	mov	r11, r22
	uint32_t result = 0;

	for (uint8_t i = 0; i < average; ++i )
 1bc:	cc 24       	eor	r12, r12
}

/* Mehrfachmessung mit Mittelwertbbildung durchführen */
uint16_t ADC_Read_Avg(uint8_t channel, uint8_t average)
{
	uint32_t result = 0;
 1be:	ee 24       	eor	r14, r14
 1c0:	ff 24       	eor	r15, r15
 1c2:	87 01       	movw	r16, r14

	for (uint8_t i = 0; i < average; ++i )
 1c4:	0b c0       	rjmp	.+22     	; 0x1dc <ADC_Read_Avg+0x32>
		result += ADC_Read(channel);
 1c6:	8d 2d       	mov	r24, r13
 1c8:	0e 94 c9 00 	call	0x192	; 0x192 <ADC_Read>
 1cc:	ac 01       	movw	r20, r24
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	70 e0       	ldi	r23, 0x00	; 0
 1d2:	e4 0e       	add	r14, r20
 1d4:	f5 1e       	adc	r15, r21
 1d6:	06 1f       	adc	r16, r22
 1d8:	17 1f       	adc	r17, r23
/* Mehrfachmessung mit Mittelwertbbildung durchführen */
uint16_t ADC_Read_Avg(uint8_t channel, uint8_t average)
{
	uint32_t result = 0;

	for (uint8_t i = 0; i < average; ++i )
 1da:	c3 94       	inc	r12
 1dc:	cb 14       	cp	r12, r11
 1de:	98 f3       	brcs	.-26     	; 0x1c6 <ADC_Read_Avg+0x1c>
		result += ADC_Read(channel);

	return (uint16_t)(result / average);
 1e0:	2b 2d       	mov	r18, r11
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	50 e0       	ldi	r21, 0x00	; 0
 1e8:	c8 01       	movw	r24, r16
 1ea:	b7 01       	movw	r22, r14
 1ec:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__udivmodsi4>
}
 1f0:	c9 01       	movw	r24, r18
 1f2:	1f 91       	pop	r17
 1f4:	0f 91       	pop	r16
 1f6:	ff 90       	pop	r15
 1f8:	ef 90       	pop	r14
 1fa:	df 90       	pop	r13
 1fc:	cf 90       	pop	r12
 1fe:	bf 90       	pop	r11
 200:	08 95       	ret

00000202 <schwellwert>:

	}
}

void schwellwert()
{
 202:	1f 93       	push	r17

		//adcval = ADC_Read(0); // Kanal 0, Einzelmessung
		adcval = ADC_Read(0); // Kanal 0, Mittelwert aus 4 Messungen

		if(adcval >=512)
			PORTC = 0x01;
 204:	11 e0       	ldi	r17, 0x01	; 1
	uint16_t adcval;

	while(1) {

		//adcval = ADC_Read(0); // Kanal 0, Einzelmessung
		adcval = ADC_Read(0); // Kanal 0, Mittelwert aus 4 Messungen
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 c9 00 	call	0x192	; 0x192 <ADC_Read>

		if(adcval >=512)
 20c:	22 e0       	ldi	r18, 0x02	; 2
 20e:	80 30       	cpi	r24, 0x00	; 0
 210:	92 07       	cpc	r25, r18
 212:	10 f0       	brcs	.+4      	; 0x218 <schwellwert+0x16>
			PORTC = 0x01;
 214:	15 bb       	out	0x15, r17	; 21
 216:	01 c0       	rjmp	.+2      	; 0x21a <schwellwert+0x18>
		else
			PORTC = 0x00;
 218:	15 ba       	out	0x15, r1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	87 ea       	ldi	r24, 0xA7	; 167
 21c:	91 e6       	ldi	r25, 0x61	; 97
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <schwellwert+0x1c>
 222:	00 c0       	rjmp	.+0      	; 0x224 <schwellwert+0x22>
 224:	00 00       	nop
 226:	ef cf       	rjmp	.-34     	; 0x206 <schwellwert+0x4>

00000228 <pegelanzeige>:
		_delay_ms(100);
	}
}

void pegelanzeige()
{
 228:	af 92       	push	r10
 22a:	bf 92       	push	r11
 22c:	cf 92       	push	r12
 22e:	df 92       	push	r13
 230:	ef 92       	push	r14
 232:	ff 92       	push	r15
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17

		//adcval = ADC_Read(0); // Kanal 0, Einzelmessung
		adcval = ADC_Read(0); // Kanal 0, Mittelwert aus 4 Messungen

		if(adcval >=0)
			PORTC = 1<<PINC0;
 238:	aa 24       	eor	r10, r10
 23a:	a3 94       	inc	r10
		
		if(adcval >=128)
			PORTC = 1<<PINC1 | 1<<PINC0;
 23c:	43 e0       	ldi	r20, 0x03	; 3
 23e:	b4 2e       	mov	r11, r20
		
		if(adcval >=256)
			PORTC = 1<<PINC2 | 1<<PINC1 | 1<<PINC0;
 240:	37 e0       	ldi	r19, 0x07	; 7
 242:	c3 2e       	mov	r12, r19

		if(adcval >=384)
			PORTC = 1<<PINC3 | 1<<PINC2 | 1<<PINC1 | 1<<PINC0;
 244:	2f e0       	ldi	r18, 0x0F	; 15
 246:	d2 2e       	mov	r13, r18

		if(adcval >=512)
			PORTC = ~(1<<PINC7 | 1<<PINC6 | 1<<PINC5);
 248:	9f e1       	ldi	r25, 0x1F	; 31
 24a:	e9 2e       	mov	r14, r25

		if(adcval >=640)
			PORTC = ~(1<<PINC7 | 1<<PINC6);
 24c:	8f e3       	ldi	r24, 0x3F	; 63
 24e:	f8 2e       	mov	r15, r24

		if(adcval >=768)
			PORTC = ~(1<<PINC7);
 250:	0f e7       	ldi	r16, 0x7F	; 127

		if(adcval >=896)
			PORTC = 0xff;
 252:	1f ef       	ldi	r17, 0xFF	; 255
	uint16_t adcval;

	while( 1 ) {

		//adcval = ADC_Read(0); // Kanal 0, Einzelmessung
		adcval = ADC_Read(0); // Kanal 0, Mittelwert aus 4 Messungen
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	0e 94 c9 00 	call	0x192	; 0x192 <ADC_Read>

		if(adcval >=0)
			PORTC = 1<<PINC0;
 25a:	a5 ba       	out	0x15, r10	; 21
		
		if(adcval >=128)
 25c:	80 38       	cpi	r24, 0x80	; 128
 25e:	91 05       	cpc	r25, r1
 260:	f8 f0       	brcs	.+62     	; 0x2a0 <pegelanzeige+0x78>
			PORTC = 1<<PINC1 | 1<<PINC0;
 262:	b5 ba       	out	0x15, r11	; 21
		
		if(adcval >=256)
 264:	8f 3f       	cpi	r24, 0xFF	; 255
 266:	91 05       	cpc	r25, r1
 268:	d9 f0       	breq	.+54     	; 0x2a0 <pegelanzeige+0x78>
 26a:	d0 f0       	brcs	.+52     	; 0x2a0 <pegelanzeige+0x78>
			PORTC = 1<<PINC2 | 1<<PINC1 | 1<<PINC0;
 26c:	c5 ba       	out	0x15, r12	; 21

		if(adcval >=384)
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	80 38       	cpi	r24, 0x80	; 128
 272:	92 07       	cpc	r25, r18
 274:	a8 f0       	brcs	.+42     	; 0x2a0 <pegelanzeige+0x78>
			PORTC = 1<<PINC3 | 1<<PINC2 | 1<<PINC1 | 1<<PINC0;
 276:	d5 ba       	out	0x15, r13	; 21

		if(adcval >=512)
 278:	22 e0       	ldi	r18, 0x02	; 2
 27a:	80 30       	cpi	r24, 0x00	; 0
 27c:	92 07       	cpc	r25, r18
 27e:	80 f0       	brcs	.+32     	; 0x2a0 <pegelanzeige+0x78>
			PORTC = ~(1<<PINC7 | 1<<PINC6 | 1<<PINC5);
 280:	e5 ba       	out	0x15, r14	; 21

		if(adcval >=640)
 282:	22 e0       	ldi	r18, 0x02	; 2
 284:	80 38       	cpi	r24, 0x80	; 128
 286:	92 07       	cpc	r25, r18
 288:	58 f0       	brcs	.+22     	; 0x2a0 <pegelanzeige+0x78>
			PORTC = ~(1<<PINC7 | 1<<PINC6);
 28a:	f5 ba       	out	0x15, r15	; 21

		if(adcval >=768)
 28c:	23 e0       	ldi	r18, 0x03	; 3
 28e:	80 30       	cpi	r24, 0x00	; 0
 290:	92 07       	cpc	r25, r18
 292:	30 f0       	brcs	.+12     	; 0x2a0 <pegelanzeige+0x78>
			PORTC = ~(1<<PINC7);
 294:	05 bb       	out	0x15, r16	; 21

		if(adcval >=896)
 296:	23 e0       	ldi	r18, 0x03	; 3
 298:	80 38       	cpi	r24, 0x80	; 128
 29a:	92 07       	cpc	r25, r18
 29c:	08 f0       	brcs	.+2      	; 0x2a0 <pegelanzeige+0x78>
			PORTC = 0xff;
 29e:	15 bb       	out	0x15, r17	; 21

		send_adc(adcval, 0);	// Zusatz für Debuggung-Ausgabe
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	0e 94 1d 03 	call	0x63a	; 0x63a <send_adc>
		send_portc();
 2a6:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <send_portc>
 2aa:	87 ea       	ldi	r24, 0xA7	; 167
 2ac:	91 e6       	ldi	r25, 0x61	; 97
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <pegelanzeige+0x86>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <pegelanzeige+0x8c>
 2b4:	00 00       	nop
 2b6:	ce cf       	rjmp	.-100    	; 0x254 <pegelanzeige+0x2c>

000002b8 <main>:
void schwellwert();
void pegelanzeige();

int main()
{
	usart_init(9600);	// Initialisieren der seriellen Schnittstelle
 2b8:	80 e8       	ldi	r24, 0x80	; 128
 2ba:	95 e2       	ldi	r25, 0x25	; 37
 2bc:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <usart_init>

	ADC_Init();
 2c0:	0e 94 be 00 	call	0x17c	; 0x17c <ADC_Init>

	DDRC = 0xff;
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	84 bb       	out	0x14, r24	; 20

	while(1) {

		pegelanzeige();
 2c8:	0e 94 14 01 	call	0x228	; 0x228 <pegelanzeige>
 2cc:	fd cf       	rjmp	.-6      	; 0x2c8 <main+0x10>

000002ce <send_ddr>:
#include <avr/io.h>
#include <stdlib.h>

// Sende Inhalt aller Datenrichtigungsregister
void send_ddr()
{
 2ce:	ef 92       	push	r14
 2d0:	ff 92       	push	r15
 2d2:	0f 93       	push	r16
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
	usart_puts("[ddr:");
 2da:	0d e8       	ldi	r16, 0x8D	; 141
 2dc:	13 e0       	ldi	r17, 0x03	; 3
 2de:	80 e6       	ldi	r24, 0x60	; 96
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	f8 01       	movw	r30, r16
 2e4:	09 95       	icall
	usart_putui_hex(DDRA, 2);
 2e6:	83 ea       	ldi	r24, 0xA3	; 163
 2e8:	e8 2e       	mov	r14, r24
 2ea:	83 e0       	ldi	r24, 0x03	; 3
 2ec:	f8 2e       	mov	r15, r24
 2ee:	8a b3       	in	r24, 0x1a	; 26
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	62 e0       	ldi	r22, 0x02	; 2
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	f7 01       	movw	r30, r14
 2f8:	09 95       	icall
	usart_puts(":");
 2fa:	c6 e6       	ldi	r28, 0x66	; 102
 2fc:	d0 e0       	ldi	r29, 0x00	; 0
 2fe:	ce 01       	movw	r24, r28
 300:	f8 01       	movw	r30, r16
 302:	09 95       	icall
	usart_putui_hex(DDRB, 2);
 304:	87 b3       	in	r24, 0x17	; 23
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	62 e0       	ldi	r22, 0x02	; 2
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	f7 01       	movw	r30, r14
 30e:	09 95       	icall
	usart_puts(":");
 310:	ce 01       	movw	r24, r28
 312:	f8 01       	movw	r30, r16
 314:	09 95       	icall
	usart_putui_hex(DDRC, 2);
 316:	84 b3       	in	r24, 0x14	; 20
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	62 e0       	ldi	r22, 0x02	; 2
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	f7 01       	movw	r30, r14
 320:	09 95       	icall
	usart_puts(":");
 322:	ce 01       	movw	r24, r28
 324:	f8 01       	movw	r30, r16
 326:	09 95       	icall
	usart_putui_hex(DDRD, 2);
 328:	81 b3       	in	r24, 0x11	; 17
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	62 e0       	ldi	r22, 0x02	; 2
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	f7 01       	movw	r30, r14
 332:	09 95       	icall
	usart_puts("]\n");
 334:	88 e6       	ldi	r24, 0x68	; 104
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	f8 01       	movw	r30, r16
 33a:	09 95       	icall
}
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	0f 91       	pop	r16
 344:	ff 90       	pop	r15
 346:	ef 90       	pop	r14
 348:	08 95       	ret

0000034a <send_ddra>:

// Sende Inhalt von DDRA
void send_ddra()
{
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
	usart_puts("[ddra:");
 34e:	cd e8       	ldi	r28, 0x8D	; 141
 350:	d3 e0       	ldi	r29, 0x03	; 3
 352:	8b e6       	ldi	r24, 0x6B	; 107
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	fe 01       	movw	r30, r28
 358:	09 95       	icall
	usart_putui_hex(DDRA, 2);
 35a:	8a b3       	in	r24, 0x1a	; 26
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	62 e0       	ldi	r22, 0x02	; 2
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	0e 94 a3 03 	call	0x746	; 0x746 <usart_putui_hex>
	usart_puts("]\n");
 366:	88 e6       	ldi	r24, 0x68	; 104
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	fe 01       	movw	r30, r28
 36c:	09 95       	icall
}
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <send_ddrb>:


// Sende Inhalt von DDRB
void send_ddrb()
{
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
	usart_puts("[ddrb:");
 378:	cd e8       	ldi	r28, 0x8D	; 141
 37a:	d3 e0       	ldi	r29, 0x03	; 3
 37c:	82 e7       	ldi	r24, 0x72	; 114
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	fe 01       	movw	r30, r28
 382:	09 95       	icall
	usart_putui_hex(DDRB, 2);
 384:	87 b3       	in	r24, 0x17	; 23
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	62 e0       	ldi	r22, 0x02	; 2
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	0e 94 a3 03 	call	0x746	; 0x746 <usart_putui_hex>
	usart_puts("]\n");
 390:	88 e6       	ldi	r24, 0x68	; 104
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	fe 01       	movw	r30, r28
 396:	09 95       	icall
}
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <send_ddrc>:

// Sende Inhalt von DDRC
void send_ddrc()
{
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
	usart_puts("[ddrc:");
 3a2:	cd e8       	ldi	r28, 0x8D	; 141
 3a4:	d3 e0       	ldi	r29, 0x03	; 3
 3a6:	89 e7       	ldi	r24, 0x79	; 121
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	fe 01       	movw	r30, r28
 3ac:	09 95       	icall
	usart_putui_hex(DDRC, 2);
 3ae:	84 b3       	in	r24, 0x14	; 20
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	62 e0       	ldi	r22, 0x02	; 2
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	0e 94 a3 03 	call	0x746	; 0x746 <usart_putui_hex>
	usart_puts("]\n");
 3ba:	88 e6       	ldi	r24, 0x68	; 104
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	fe 01       	movw	r30, r28
 3c0:	09 95       	icall
}
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <send_ddrd>:

// Sende Inhalt von DDRD
void send_ddrd()
{
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
	usart_puts("[ddrd:");
 3cc:	cd e8       	ldi	r28, 0x8D	; 141
 3ce:	d3 e0       	ldi	r29, 0x03	; 3
 3d0:	80 e8       	ldi	r24, 0x80	; 128
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	fe 01       	movw	r30, r28
 3d6:	09 95       	icall
	usart_putui_hex(DDRD, 2);
 3d8:	81 b3       	in	r24, 0x11	; 17
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	62 e0       	ldi	r22, 0x02	; 2
 3de:	70 e0       	ldi	r23, 0x00	; 0
 3e0:	0e 94 a3 03 	call	0x746	; 0x746 <usart_putui_hex>
	usart_puts("]\n");
 3e4:	88 e6       	ldi	r24, 0x68	; 104
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	fe 01       	movw	r30, r28
 3ea:	09 95       	icall
}
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	08 95       	ret

000003f2 <send_pins>:

// Sende Inhalt aller Eingangsadressen
void send_pins()
{
 3f2:	ef 92       	push	r14
 3f4:	ff 92       	push	r15
 3f6:	0f 93       	push	r16
 3f8:	1f 93       	push	r17
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
	usart_puts("[pin:");
 3fe:	0d e8       	ldi	r16, 0x8D	; 141
 400:	13 e0       	ldi	r17, 0x03	; 3
 402:	87 e8       	ldi	r24, 0x87	; 135
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	f8 01       	movw	r30, r16
 408:	09 95       	icall
	usart_putui_hex(PINA, 2);
 40a:	93 ea       	ldi	r25, 0xA3	; 163
 40c:	e9 2e       	mov	r14, r25
 40e:	93 e0       	ldi	r25, 0x03	; 3
 410:	f9 2e       	mov	r15, r25
 412:	89 b3       	in	r24, 0x19	; 25
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	62 e0       	ldi	r22, 0x02	; 2
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	f7 01       	movw	r30, r14
 41c:	09 95       	icall
	usart_puts(":");
 41e:	c6 e6       	ldi	r28, 0x66	; 102
 420:	d0 e0       	ldi	r29, 0x00	; 0
 422:	ce 01       	movw	r24, r28
 424:	f8 01       	movw	r30, r16
 426:	09 95       	icall
	usart_putui_hex(PINB, 2);
 428:	86 b3       	in	r24, 0x16	; 22
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	62 e0       	ldi	r22, 0x02	; 2
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	f7 01       	movw	r30, r14
 432:	09 95       	icall
	usart_puts(":");
 434:	ce 01       	movw	r24, r28
 436:	f8 01       	movw	r30, r16
 438:	09 95       	icall
	usart_putui_hex(PINC, 2);
 43a:	83 b3       	in	r24, 0x13	; 19
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	62 e0       	ldi	r22, 0x02	; 2
 440:	70 e0       	ldi	r23, 0x00	; 0
 442:	f7 01       	movw	r30, r14
 444:	09 95       	icall
	usart_puts(":");
 446:	ce 01       	movw	r24, r28
 448:	f8 01       	movw	r30, r16
 44a:	09 95       	icall
	usart_putui_hex(PIND, 2);
 44c:	80 b3       	in	r24, 0x10	; 16
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	62 e0       	ldi	r22, 0x02	; 2
 452:	70 e0       	ldi	r23, 0x00	; 0
 454:	f7 01       	movw	r30, r14
 456:	09 95       	icall
	usart_puts("]\n");
 458:	88 e6       	ldi	r24, 0x68	; 104
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	f8 01       	movw	r30, r16
 45e:	09 95       	icall
}
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	1f 91       	pop	r17
 466:	0f 91       	pop	r16
 468:	ff 90       	pop	r15
 46a:	ef 90       	pop	r14
 46c:	08 95       	ret

0000046e <send_pina>:

// Sende Inhalt von PINA
void send_pina()
{
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
	usart_puts("[pina:");
 472:	cd e8       	ldi	r28, 0x8D	; 141
 474:	d3 e0       	ldi	r29, 0x03	; 3
 476:	8d e8       	ldi	r24, 0x8D	; 141
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	fe 01       	movw	r30, r28
 47c:	09 95       	icall
	usart_putui_hex(PINA, 2);
 47e:	89 b3       	in	r24, 0x19	; 25
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	62 e0       	ldi	r22, 0x02	; 2
 484:	70 e0       	ldi	r23, 0x00	; 0
 486:	0e 94 a3 03 	call	0x746	; 0x746 <usart_putui_hex>
	usart_puts("]\n");
 48a:	88 e6       	ldi	r24, 0x68	; 104
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	fe 01       	movw	r30, r28
 490:	09 95       	icall
}
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	08 95       	ret

00000498 <send_pinb>:


// Sende Inhalt von PINB
void send_pinb()
{
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
	usart_puts("[pinb:");
 49c:	cd e8       	ldi	r28, 0x8D	; 141
 49e:	d3 e0       	ldi	r29, 0x03	; 3
 4a0:	84 e9       	ldi	r24, 0x94	; 148
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	fe 01       	movw	r30, r28
 4a6:	09 95       	icall
	usart_putui_hex(PINB, 2);
 4a8:	86 b3       	in	r24, 0x16	; 22
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	62 e0       	ldi	r22, 0x02	; 2
 4ae:	70 e0       	ldi	r23, 0x00	; 0
 4b0:	0e 94 a3 03 	call	0x746	; 0x746 <usart_putui_hex>
	usart_puts("]\n");
 4b4:	88 e6       	ldi	r24, 0x68	; 104
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	fe 01       	movw	r30, r28
 4ba:	09 95       	icall
}
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	08 95       	ret

000004c2 <send_pinc>:

// Sende Inhalt von PINC
void send_pinc()
{
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
	usart_puts("[pinc:");
 4c6:	cd e8       	ldi	r28, 0x8D	; 141
 4c8:	d3 e0       	ldi	r29, 0x03	; 3
 4ca:	8b e9       	ldi	r24, 0x9B	; 155
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	fe 01       	movw	r30, r28
 4d0:	09 95       	icall
	usart_putui_hex(PINC, 2);
 4d2:	83 b3       	in	r24, 0x13	; 19
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	62 e0       	ldi	r22, 0x02	; 2
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	0e 94 a3 03 	call	0x746	; 0x746 <usart_putui_hex>
	usart_puts("]\n");
 4de:	88 e6       	ldi	r24, 0x68	; 104
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	fe 01       	movw	r30, r28
 4e4:	09 95       	icall
}
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	08 95       	ret

000004ec <send_pind>:

// Sende Inhalt von PIND
void send_pind()
{
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
	usart_puts("[pind:");
 4f0:	cd e8       	ldi	r28, 0x8D	; 141
 4f2:	d3 e0       	ldi	r29, 0x03	; 3
 4f4:	82 ea       	ldi	r24, 0xA2	; 162
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	fe 01       	movw	r30, r28
 4fa:	09 95       	icall
	usart_putui_hex(PIND, 2);
 4fc:	80 b3       	in	r24, 0x10	; 16
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	62 e0       	ldi	r22, 0x02	; 2
 502:	70 e0       	ldi	r23, 0x00	; 0
 504:	0e 94 a3 03 	call	0x746	; 0x746 <usart_putui_hex>
	usart_puts("]\n");
 508:	88 e6       	ldi	r24, 0x68	; 104
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	fe 01       	movw	r30, r28
 50e:	09 95       	icall
}
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	08 95       	ret

00000516 <send_ports>:

// Inhalt aller Datenregister (PORT) senden
// Sende Inhalt aller Eingangsadressen
void send_ports()
{
 516:	ef 92       	push	r14
 518:	ff 92       	push	r15
 51a:	0f 93       	push	r16
 51c:	1f 93       	push	r17
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
	usart_puts("[port:");
 522:	0d e8       	ldi	r16, 0x8D	; 141
 524:	13 e0       	ldi	r17, 0x03	; 3
 526:	89 ea       	ldi	r24, 0xA9	; 169
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	f8 01       	movw	r30, r16
 52c:	09 95       	icall
	usart_putui_hex(PORTA, 2);
 52e:	23 ea       	ldi	r18, 0xA3	; 163
 530:	e2 2e       	mov	r14, r18
 532:	23 e0       	ldi	r18, 0x03	; 3
 534:	f2 2e       	mov	r15, r18
 536:	8b b3       	in	r24, 0x1b	; 27
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	62 e0       	ldi	r22, 0x02	; 2
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	f7 01       	movw	r30, r14
 540:	09 95       	icall
	usart_puts(":");
 542:	c6 e6       	ldi	r28, 0x66	; 102
 544:	d0 e0       	ldi	r29, 0x00	; 0
 546:	ce 01       	movw	r24, r28
 548:	f8 01       	movw	r30, r16
 54a:	09 95       	icall
	usart_putui_hex(PORTB, 2);
 54c:	88 b3       	in	r24, 0x18	; 24
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	62 e0       	ldi	r22, 0x02	; 2
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	f7 01       	movw	r30, r14
 556:	09 95       	icall
	usart_puts(":");
 558:	ce 01       	movw	r24, r28
 55a:	f8 01       	movw	r30, r16
 55c:	09 95       	icall
	usart_putui_hex(PORTC, 2);
 55e:	85 b3       	in	r24, 0x15	; 21
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	62 e0       	ldi	r22, 0x02	; 2
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	f7 01       	movw	r30, r14
 568:	09 95       	icall
	usart_puts(":");
 56a:	ce 01       	movw	r24, r28
 56c:	f8 01       	movw	r30, r16
 56e:	09 95       	icall
	usart_putui_hex(PORTD, 2);
 570:	82 b3       	in	r24, 0x12	; 18
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	62 e0       	ldi	r22, 0x02	; 2
 576:	70 e0       	ldi	r23, 0x00	; 0
 578:	f7 01       	movw	r30, r14
 57a:	09 95       	icall
	usart_puts("]\n");
 57c:	88 e6       	ldi	r24, 0x68	; 104
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	f8 01       	movw	r30, r16
 582:	09 95       	icall
}
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	1f 91       	pop	r17
 58a:	0f 91       	pop	r16
 58c:	ff 90       	pop	r15
 58e:	ef 90       	pop	r14
 590:	08 95       	ret

00000592 <send_porta>:

// Sende Inhalt von PORTA
void send_porta()
{
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
	usart_puts("[porta:");
 596:	cd e8       	ldi	r28, 0x8D	; 141
 598:	d3 e0       	ldi	r29, 0x03	; 3
 59a:	80 eb       	ldi	r24, 0xB0	; 176
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	fe 01       	movw	r30, r28
 5a0:	09 95       	icall
	usart_putui_hex(PORTA, 2);
 5a2:	8b b3       	in	r24, 0x1b	; 27
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	62 e0       	ldi	r22, 0x02	; 2
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	0e 94 a3 03 	call	0x746	; 0x746 <usart_putui_hex>
	usart_puts("]\n");
 5ae:	88 e6       	ldi	r24, 0x68	; 104
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	fe 01       	movw	r30, r28
 5b4:	09 95       	icall
}
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	08 95       	ret

000005bc <send_portb>:


// Sende Inhalt von PORTB
void send_portb()
{
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
	usart_puts("[portb:");
 5c0:	cd e8       	ldi	r28, 0x8D	; 141
 5c2:	d3 e0       	ldi	r29, 0x03	; 3
 5c4:	88 eb       	ldi	r24, 0xB8	; 184
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	fe 01       	movw	r30, r28
 5ca:	09 95       	icall
	usart_putui_hex(PORTB, 2);
 5cc:	88 b3       	in	r24, 0x18	; 24
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	62 e0       	ldi	r22, 0x02	; 2
 5d2:	70 e0       	ldi	r23, 0x00	; 0
 5d4:	0e 94 a3 03 	call	0x746	; 0x746 <usart_putui_hex>
	usart_puts("]\n");
 5d8:	88 e6       	ldi	r24, 0x68	; 104
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	fe 01       	movw	r30, r28
 5de:	09 95       	icall
}
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	08 95       	ret

000005e6 <send_portc>:

// Sende Inhalt von PORTC
void send_portc()
{
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
	usart_puts("[portc:");
 5ea:	cd e8       	ldi	r28, 0x8D	; 141
 5ec:	d3 e0       	ldi	r29, 0x03	; 3
 5ee:	80 ec       	ldi	r24, 0xC0	; 192
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	fe 01       	movw	r30, r28
 5f4:	09 95       	icall
	usart_putui_hex(PORTC, 2);
 5f6:	85 b3       	in	r24, 0x15	; 21
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	62 e0       	ldi	r22, 0x02	; 2
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	0e 94 a3 03 	call	0x746	; 0x746 <usart_putui_hex>
	usart_puts("]\n");
 602:	88 e6       	ldi	r24, 0x68	; 104
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	fe 01       	movw	r30, r28
 608:	09 95       	icall
}
 60a:	df 91       	pop	r29
 60c:	cf 91       	pop	r28
 60e:	08 95       	ret

00000610 <send_portd>:

// Sende Inhalt von PORTD
void send_portd()
{
 610:	cf 93       	push	r28
 612:	df 93       	push	r29
	usart_puts("[portd:");
 614:	cd e8       	ldi	r28, 0x8D	; 141
 616:	d3 e0       	ldi	r29, 0x03	; 3
 618:	88 ec       	ldi	r24, 0xC8	; 200
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	fe 01       	movw	r30, r28
 61e:	09 95       	icall
	usart_putui_hex(PORTD, 2);
 620:	82 b3       	in	r24, 0x12	; 18
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	62 e0       	ldi	r22, 0x02	; 2
 626:	70 e0       	ldi	r23, 0x00	; 0
 628:	0e 94 a3 03 	call	0x746	; 0x746 <usart_putui_hex>
	usart_puts("]\n");
 62c:	88 e6       	ldi	r24, 0x68	; 104
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	fe 01       	movw	r30, r28
 632:	09 95       	icall
}
 634:	df 91       	pop	r29
 636:	cf 91       	pop	r28
 638:	08 95       	ret

0000063a <send_adc>:

void send_adc(uint16_t adcw, uint8_t channel)
{
 63a:	bf 92       	push	r11
 63c:	cf 92       	push	r12
 63e:	df 92       	push	r13
 640:	ef 92       	push	r14
 642:	ff 92       	push	r15
 644:	0f 93       	push	r16
 646:	1f 93       	push	r17
 648:	cf 93       	push	r28
 64a:	df 93       	push	r29
 64c:	b8 2e       	mov	r11, r24
 64e:	c9 2e       	mov	r12, r25
 650:	d6 2e       	mov	r13, r22
	usart_puts("[adc:");
 652:	0d e8       	ldi	r16, 0x8D	; 141
 654:	13 e0       	ldi	r17, 0x03	; 3
 656:	80 ed       	ldi	r24, 0xD0	; 208
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	f8 01       	movw	r30, r16
 65c:	09 95       	icall
	usart_putui_hex((uint8_t)adcw, 2);
 65e:	33 ea       	ldi	r19, 0xA3	; 163
 660:	e3 2e       	mov	r14, r19
 662:	33 e0       	ldi	r19, 0x03	; 3
 664:	f3 2e       	mov	r15, r19
 666:	8b 2d       	mov	r24, r11
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	62 e0       	ldi	r22, 0x02	; 2
 66c:	70 e0       	ldi	r23, 0x00	; 0
 66e:	f7 01       	movw	r30, r14
 670:	09 95       	icall
	usart_puts(":");
 672:	c6 e6       	ldi	r28, 0x66	; 102
 674:	d0 e0       	ldi	r29, 0x00	; 0
 676:	ce 01       	movw	r24, r28
 678:	f8 01       	movw	r30, r16
 67a:	09 95       	icall
	usart_putui_hex((uint8_t)(adcw>>8), 2);
 67c:	8c 2d       	mov	r24, r12
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	62 e0       	ldi	r22, 0x02	; 2
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	f7 01       	movw	r30, r14
 686:	09 95       	icall
	usart_puts(":");
 688:	ce 01       	movw	r24, r28
 68a:	f8 01       	movw	r30, r16
 68c:	09 95       	icall
	usart_putui_hex(channel, 2);
 68e:	8d 2d       	mov	r24, r13
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	62 e0       	ldi	r22, 0x02	; 2
 694:	70 e0       	ldi	r23, 0x00	; 0
 696:	f7 01       	movw	r30, r14
 698:	09 95       	icall
	usart_puts("]\n");
 69a:	88 e6       	ldi	r24, 0x68	; 104
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	f8 01       	movw	r30, r16
 6a0:	09 95       	icall
}
 6a2:	df 91       	pop	r29
 6a4:	cf 91       	pop	r28
 6a6:	1f 91       	pop	r17
 6a8:	0f 91       	pop	r16
 6aa:	ff 90       	pop	r15
 6ac:	ef 90       	pop	r14
 6ae:	df 90       	pop	r13
 6b0:	cf 90       	pop	r12
 6b2:	bf 90       	pop	r11
 6b4:	08 95       	ret

000006b6 <usart_init>:
	const uint32_t freq_osz=16000000L;	//Taktfrequenz 16MHz

	uint16_t baud_rate;

	//Baudrate einstellen
	baud_rate=freq_osz/(baud*16L)-1;
 6b6:	9c 01       	movw	r18, r24
 6b8:	40 e0       	ldi	r20, 0x00	; 0
 6ba:	50 e0       	ldi	r21, 0x00	; 0
 6bc:	64 e0       	ldi	r22, 0x04	; 4
 6be:	22 0f       	add	r18, r18
 6c0:	33 1f       	adc	r19, r19
 6c2:	44 1f       	adc	r20, r20
 6c4:	55 1f       	adc	r21, r21
 6c6:	6a 95       	dec	r22
 6c8:	d1 f7       	brne	.-12     	; 0x6be <usart_init+0x8>
 6ca:	60 e0       	ldi	r22, 0x00	; 0
 6cc:	74 e2       	ldi	r23, 0x24	; 36
 6ce:	84 ef       	ldi	r24, 0xF4	; 244
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__udivmodsi4>
 6d6:	21 50       	subi	r18, 0x01	; 1
 6d8:	30 40       	sbci	r19, 0x00	; 0
	UBRRH=(uint8_t)(baud_rate>>8);
 6da:	30 bd       	out	0x20, r19	; 32
	UBRRL=(uint8_t)baud_rate;     
 6dc:	29 b9       	out	0x09, r18	; 9

	//8N1 Daten -> 8 Datenbits, Keine Paritaet, 1 Stopbit
	UCSRC|=(1<<URSEL)|(3<<UCSZ0);
 6de:	80 b5       	in	r24, 0x20	; 32
 6e0:	86 68       	ori	r24, 0x86	; 134
 6e2:	80 bd       	out	0x20, r24	; 32

	// Senden und Empfangen
	UCSRB=(1<<RXEN)|(1<<TXEN);
 6e4:	88 e1       	ldi	r24, 0x18	; 24
 6e6:	8a b9       	out	0x0a, r24	; 10
}
 6e8:	08 95       	ret

000006ea <usart_byte_avail>:


// Ueberpruefung, ob ein einzelnes Byte empfangen wurde	// OK
uint8_t usart_byte_avail(void) {

	if(UCSRA&(1<<RXC))	// Ueberpruefe ob ein char gesendet wurde
 6ea:	8b b1       	in	r24, 0x0b	; 11
		return 1;		// wenn ja, ein zurueckgeben
	else
		return 0;		// ansonsten 0 zurueckgeben
}
 6ec:	88 1f       	adc	r24, r24
 6ee:	88 27       	eor	r24, r24
 6f0:	88 1f       	adc	r24, r24
 6f2:	08 95       	ret

000006f4 <usart_getc>:

// Ein Byte einlesen	// OK
uint8_t usart_getc(void) {

	while(!(UCSRA&(1<<RXC)));	// Warten auf empfangenes Byte
 6f4:	5f 9b       	sbis	0x0b, 7	; 11
 6f6:	fe cf       	rjmp	.-4      	; 0x6f4 <usart_getc>
		return UDR;				// Lesen und zurueckgeben des Bytes
 6f8:	8c b1       	in	r24, 0x0c	; 12
}
 6fa:	08 95       	ret

000006fc <usart_gets>:

// Einlesen von Zeichenketten	// OK
void usart_gets(char *s) {
 6fc:	cf 93       	push	r28
 6fe:	df 93       	push	r29
 700:	ec 01       	movw	r28, r24

	char c;	// Puffervariable zum einlesen einer Zeichenkette

	do {
		c = usart_getc();	// Funktionsaufruf zum lesen eines Bytes
 702:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <usart_getc>
		*s=c;				// Schreiben des Bytes in Zeichenkette (Zeiger auf char)
 706:	89 93       	st	Y+, r24
		s++;				// hochzaehlen der Zeichenketten/Zeigeradresse
	} while(c!=0);			// Abbruch nachdem Endmarke erreicht und eingelsen wurde
 708:	88 23       	and	r24, r24
 70a:	d9 f7       	brne	.-10     	; 0x702 <usart_gets+0x6>
}
 70c:	df 91       	pop	r29
 70e:	cf 91       	pop	r28
 710:	08 95       	ret

00000712 <usart_putc>:
// --- Funktionen zum Senden von Daten ---

// Senden eines einzelnen Bytes	// OK
void usart_putc(uint8_t byte) {

	while(!(UCSRA&(1<<UDRE)));	// warten, bis Datenregister leer ist
 712:	5d 9b       	sbis	0x0b, 5	; 11
 714:	fe cf       	rjmp	.-4      	; 0x712 <usart_putc>
	UDR=byte;
 716:	8c b9       	out	0x0c, r24	; 12
}
 718:	08 95       	ret

0000071a <usart_puts>:

// Senden einer Zeichenkette (String)	// OK
void usart_puts(char *s) {
 71a:	ef 92       	push	r14
 71c:	ff 92       	push	r15
 71e:	cf 93       	push	r28
 720:	df 93       	push	r29
 722:	e8 2e       	mov	r14, r24
 724:	e7 01       	movw	r28, r14
 726:	7e 01       	movw	r14, r28
 728:	f9 2e       	mov	r15, r25
 72a:	e7 01       	movw	r28, r14

	// Auslesen und senden der Zeichenkette
    while (*s!=0) {
 72c:	02 c0       	rjmp	.+4      	; 0x732 <usart_puts+0x18>
        usart_putc(*s);
 72e:	0e 94 89 03 	call	0x712	; 0x712 <usart_putc>

// Senden einer Zeichenkette (String)	// OK
void usart_puts(char *s) {

	// Auslesen und senden der Zeichenkette
    while (*s!=0) {
 732:	89 91       	ld	r24, Y+
 734:	88 23       	and	r24, r24
 736:	d9 f7       	brne	.-10     	; 0x72e <usart_puts+0x14>
        usart_putc(*s);
		s++;
    }
    usart_putc(0);	// Uebertragen der Endmarke 0
 738:	0e 94 89 03 	call	0x712	; 0x712 <usart_putc>
}
 73c:	df 91       	pop	r29
 73e:	cf 91       	pop	r28
 740:	ff 90       	pop	r15
 742:	ef 90       	pop	r14
 744:	08 95       	ret

00000746 <usart_putui_hex>:
		usart_putc('0');

	usart_puts(buffer);
}
//--------------------------------------------------------------
void usart_putui_hex(unsigned int zahl, int sges) {
 746:	ef 92       	push	r14
 748:	ff 92       	push	r15
 74a:	0f 93       	push	r16
 74c:	1f 93       	push	r17
 74e:	df 93       	push	r29
 750:	cf 93       	push	r28
 752:	cd b7       	in	r28, 0x3d	; 61
 754:	de b7       	in	r29, 0x3e	; 62
 756:	61 97       	sbiw	r28, 0x11	; 17
 758:	0f b6       	in	r0, 0x3f	; 63
 75a:	f8 94       	cli
 75c:	de bf       	out	0x3e, r29	; 62
 75e:	0f be       	out	0x3f, r0	; 63
 760:	cd bf       	out	0x3d, r28	; 61
 762:	7b 01       	movw	r14, r22
	//Senden der nur-positiven Integerzahl zahl formatiert  mit sges Stellen
	// das Ausgabeformat ist hex (TSC)
	char buffer[17];
	uint8_t l=0,n;
	char *z=buffer;
	utoa(zahl,buffer,16);//Unsigned to String (ASCII)
 764:	8e 01       	movw	r16, r28
 766:	0f 5f       	subi	r16, 0xFF	; 255
 768:	1f 4f       	sbci	r17, 0xFF	; 255
 76a:	b8 01       	movw	r22, r16
 76c:	40 e1       	ldi	r20, 0x10	; 16
 76e:	50 e0       	ldi	r21, 0x00	; 0
 770:	0e 94 50 05 	call	0xaa0	; 0xaa0 <utoa>

	while(*z!=0) //Bufferlänge l
 774:	f8 01       	movw	r30, r16
 776:	8e 2f       	mov	r24, r30
 778:	80 1b       	sub	r24, r16
 77a:	91 91       	ld	r25, Z+
 77c:	99 23       	and	r25, r25
 77e:	d9 f7       	brne	.-10     	; 0x776 <usart_putui_hex+0x30>
 780:	08 2f       	mov	r16, r24
 782:	04 c0       	rjmp	.+8      	; 0x78c <usart_putui_hex+0x46>
		l++;
		z++;
	}

	for(n=l;n<sges;n++)
		 usart_putc('0');	// usart_putc(' '); // 0 anstelle von Leerstelle senden
 784:	80 e3       	ldi	r24, 0x30	; 48
 786:	0e 94 89 03 	call	0x712	; 0x712 <usart_putc>
	{
		l++;
		z++;
	}

	for(n=l;n<sges;n++)
 78a:	0f 5f       	subi	r16, 0xFF	; 255
 78c:	80 2f       	mov	r24, r16
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	8e 15       	cp	r24, r14
 792:	9f 05       	cpc	r25, r15
 794:	bc f3       	brlt	.-18     	; 0x784 <usart_putui_hex+0x3e>
		 usart_putc('0');	// usart_putc(' '); // 0 anstelle von Leerstelle senden
		
	usart_puts(buffer);
 796:	ce 01       	movw	r24, r28
 798:	01 96       	adiw	r24, 0x01	; 1
 79a:	0e 94 8d 03 	call	0x71a	; 0x71a <usart_puts>
}
 79e:	61 96       	adiw	r28, 0x11	; 17
 7a0:	0f b6       	in	r0, 0x3f	; 63
 7a2:	f8 94       	cli
 7a4:	de bf       	out	0x3e, r29	; 62
 7a6:	0f be       	out	0x3f, r0	; 63
 7a8:	cd bf       	out	0x3d, r28	; 61
 7aa:	cf 91       	pop	r28
 7ac:	df 91       	pop	r29
 7ae:	1f 91       	pop	r17
 7b0:	0f 91       	pop	r16
 7b2:	ff 90       	pop	r15
 7b4:	ef 90       	pop	r14
 7b6:	08 95       	ret

000007b8 <usart_puti>:
    }
    usart_putc(0);	// Uebertragen der Endmarke 0
}

// Eine Integer-Zahl als Zeichenkette senden, mit festgel. Stellenzahl
void usart_puti(int zahl, int sges) {
 7b8:	ef 92       	push	r14
 7ba:	ff 92       	push	r15
 7bc:	0f 93       	push	r16
 7be:	1f 93       	push	r17
 7c0:	df 93       	push	r29
 7c2:	cf 93       	push	r28
 7c4:	cd b7       	in	r28, 0x3d	; 61
 7c6:	de b7       	in	r29, 0x3e	; 62
 7c8:	60 97       	sbiw	r28, 0x10	; 16
 7ca:	0f b6       	in	r0, 0x3f	; 63
 7cc:	f8 94       	cli
 7ce:	de bf       	out	0x3e, r29	; 62
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	cd bf       	out	0x3d, r28	; 61
 7d4:	7b 01       	movw	r14, r22

	char buffer[16];
	uint8_t l=0,n;
	char *z=buffer;
	itoa(zahl,buffer,10);	// Umwandeln von Integer nach  String (als ASCII)
 7d6:	8e 01       	movw	r16, r28
 7d8:	0f 5f       	subi	r16, 0xFF	; 255
 7da:	1f 4f       	sbci	r17, 0xFF	; 255
 7dc:	b8 01       	movw	r22, r16
 7de:	4a e0       	ldi	r20, 0x0A	; 10
 7e0:	50 e0       	ldi	r21, 0x00	; 0
 7e2:	0e 94 2f 05 	call	0xa5e	; 0xa5e <itoa>

	while(*z!=0) //Stellenbedarf l für zahl
 7e6:	f8 01       	movw	r30, r16
 7e8:	8e 2f       	mov	r24, r30
 7ea:	80 1b       	sub	r24, r16
 7ec:	91 91       	ld	r25, Z+
 7ee:	99 23       	and	r25, r25
 7f0:	d9 f7       	brne	.-10     	; 0x7e8 <usart_puti+0x30>
 7f2:	08 2f       	mov	r16, r24
 7f4:	04 c0       	rjmp	.+8      	; 0x7fe <usart_puti+0x46>
		l++;
		z++;
	}

	for(n=l;n<sges;n++)
		 usart_putc(' '); //Leerstellen senden
 7f6:	80 e2       	ldi	r24, 0x20	; 32
 7f8:	0e 94 89 03 	call	0x712	; 0x712 <usart_putc>
	{
		l++;
		z++;
	}

	for(n=l;n<sges;n++)
 7fc:	0f 5f       	subi	r16, 0xFF	; 255
 7fe:	80 2f       	mov	r24, r16
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	8e 15       	cp	r24, r14
 804:	9f 05       	cpc	r25, r15
 806:	bc f3       	brlt	.-18     	; 0x7f6 <usart_puti+0x3e>
		 usart_putc(' '); //Leerstellen senden

	usart_puts(buffer);//Zahl senden
 808:	ce 01       	movw	r24, r28
 80a:	01 96       	adiw	r24, 0x01	; 1
 80c:	0e 94 8d 03 	call	0x71a	; 0x71a <usart_puts>
}
 810:	60 96       	adiw	r28, 0x10	; 16
 812:	0f b6       	in	r0, 0x3f	; 63
 814:	f8 94       	cli
 816:	de bf       	out	0x3e, r29	; 62
 818:	0f be       	out	0x3f, r0	; 63
 81a:	cd bf       	out	0x3d, r28	; 61
 81c:	cf 91       	pop	r28
 81e:	df 91       	pop	r29
 820:	1f 91       	pop	r17
 822:	0f 91       	pop	r16
 824:	ff 90       	pop	r15
 826:	ef 90       	pop	r14
 828:	08 95       	ret

0000082a <usart_putf>:
//--------------------------------------------------------------
void usart_putf(float zahl, int sges, int snach) {
 82a:	ef 92       	push	r14
 82c:	ff 92       	push	r15
 82e:	0f 93       	push	r16
 830:	1f 93       	push	r17
 832:	df 93       	push	r29
 834:	cf 93       	push	r28
 836:	cd b7       	in	r28, 0x3d	; 61
 838:	de b7       	in	r29, 0x3e	; 62
 83a:	60 97       	sbiw	r28, 0x10	; 16
 83c:	0f b6       	in	r0, 0x3f	; 63
 83e:	f8 94       	cli
 840:	de bf       	out	0x3e, r29	; 62
 842:	0f be       	out	0x3f, r0	; 63
 844:	cd bf       	out	0x3d, r28	; 61
	//Senden einer Fließkommazahl mit sges Gesamtstellen 
	//als Zeichenkette
	//Hiervon sind snach Nachkommastellen.
	//Die Nachkollastellen werden gerundet. 
	char buffer[16];
	dtostrf(zahl,sges,snach,buffer);//Double to String formatiert
 846:	7e 01       	movw	r14, r28
 848:	08 94       	sec
 84a:	e1 1c       	adc	r14, r1
 84c:	f1 1c       	adc	r15, r1
 84e:	87 01       	movw	r16, r14
 850:	0e 94 0d 05 	call	0xa1a	; 0xa1a <dtostrf>
	usart_puts(buffer);
 854:	c7 01       	movw	r24, r14
 856:	0e 94 8d 03 	call	0x71a	; 0x71a <usart_puts>
}
 85a:	60 96       	adiw	r28, 0x10	; 16
 85c:	0f b6       	in	r0, 0x3f	; 63
 85e:	f8 94       	cli
 860:	de bf       	out	0x3e, r29	; 62
 862:	0f be       	out	0x3f, r0	; 63
 864:	cd bf       	out	0x3d, r28	; 61
 866:	cf 91       	pop	r28
 868:	df 91       	pop	r29
 86a:	1f 91       	pop	r17
 86c:	0f 91       	pop	r16
 86e:	ff 90       	pop	r15
 870:	ef 90       	pop	r14
 872:	08 95       	ret

00000874 <usart_putui>:
//--------------------------------------------------------------
void usart_putui(unsigned int zahl, int sges) {
 874:	ef 92       	push	r14
 876:	ff 92       	push	r15
 878:	0f 93       	push	r16
 87a:	1f 93       	push	r17
 87c:	df 93       	push	r29
 87e:	cf 93       	push	r28
 880:	cd b7       	in	r28, 0x3d	; 61
 882:	de b7       	in	r29, 0x3e	; 62
 884:	60 97       	sbiw	r28, 0x10	; 16
 886:	0f b6       	in	r0, 0x3f	; 63
 888:	f8 94       	cli
 88a:	de bf       	out	0x3e, r29	; 62
 88c:	0f be       	out	0x3f, r0	; 63
 88e:	cd bf       	out	0x3d, r28	; 61
 890:	7b 01       	movw	r14, r22
	//Senden der Integerzahl zahl formatiert  mit sges Stellen
	//als Zeichenkette  
	char buffer[16];
	uint8_t l=0,n;
	char *z=buffer;
	utoa(zahl,buffer,10);//Unsigned to String (ASCII)
 892:	8e 01       	movw	r16, r28
 894:	0f 5f       	subi	r16, 0xFF	; 255
 896:	1f 4f       	sbci	r17, 0xFF	; 255
 898:	b8 01       	movw	r22, r16
 89a:	4a e0       	ldi	r20, 0x0A	; 10
 89c:	50 e0       	ldi	r21, 0x00	; 0
 89e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <utoa>

	while(*z!=0) //Bufferlänge l
 8a2:	f8 01       	movw	r30, r16
 8a4:	8e 2f       	mov	r24, r30
 8a6:	80 1b       	sub	r24, r16
 8a8:	91 91       	ld	r25, Z+
 8aa:	99 23       	and	r25, r25
 8ac:	d9 f7       	brne	.-10     	; 0x8a4 <usart_putui+0x30>
 8ae:	08 2f       	mov	r16, r24
 8b0:	04 c0       	rjmp	.+8      	; 0x8ba <usart_putui+0x46>
		l++; 
		z++;
	}

	for(n=l;n<sges;n++)
		usart_putc(' '); 
 8b2:	80 e2       	ldi	r24, 0x20	; 32
 8b4:	0e 94 89 03 	call	0x712	; 0x712 <usart_putc>
	{
		l++; 
		z++;
	}

	for(n=l;n<sges;n++)
 8b8:	0f 5f       	subi	r16, 0xFF	; 255
 8ba:	80 2f       	mov	r24, r16
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	8e 15       	cp	r24, r14
 8c0:	9f 05       	cpc	r25, r15
 8c2:	bc f3       	brlt	.-18     	; 0x8b2 <usart_putui+0x3e>
		usart_putc(' '); 

	usart_puts(buffer);
 8c4:	ce 01       	movw	r24, r28
 8c6:	01 96       	adiw	r24, 0x01	; 1
 8c8:	0e 94 8d 03 	call	0x71a	; 0x71a <usart_puts>
}
 8cc:	60 96       	adiw	r28, 0x10	; 16
 8ce:	0f b6       	in	r0, 0x3f	; 63
 8d0:	f8 94       	cli
 8d2:	de bf       	out	0x3e, r29	; 62
 8d4:	0f be       	out	0x3f, r0	; 63
 8d6:	cd bf       	out	0x3d, r28	; 61
 8d8:	cf 91       	pop	r28
 8da:	df 91       	pop	r29
 8dc:	1f 91       	pop	r17
 8de:	0f 91       	pop	r16
 8e0:	ff 90       	pop	r15
 8e2:	ef 90       	pop	r14
 8e4:	08 95       	ret

000008e6 <usart_putui_0>:
//--------------------------------------------------------------
void usart_putui_0(unsigned int zahl, int sges) {
 8e6:	ef 92       	push	r14
 8e8:	ff 92       	push	r15
 8ea:	0f 93       	push	r16
 8ec:	1f 93       	push	r17
 8ee:	df 93       	push	r29
 8f0:	cf 93       	push	r28
 8f2:	cd b7       	in	r28, 0x3d	; 61
 8f4:	de b7       	in	r29, 0x3e	; 62
 8f6:	60 97       	sbiw	r28, 0x10	; 16
 8f8:	0f b6       	in	r0, 0x3f	; 63
 8fa:	f8 94       	cli
 8fc:	de bf       	out	0x3e, r29	; 62
 8fe:	0f be       	out	0x3f, r0	; 63
 900:	cd bf       	out	0x3d, r28	; 61
 902:	7b 01       	movw	r14, r22
	//Leerstellen werden mit 0 aufgefüllt (TSC)
	char buffer[16];
	uint8_t l=0,n;
	char *z=buffer;

	utoa(zahl,buffer,10);//Unsigned to String (ASCII)
 904:	8e 01       	movw	r16, r28
 906:	0f 5f       	subi	r16, 0xFF	; 255
 908:	1f 4f       	sbci	r17, 0xFF	; 255
 90a:	b8 01       	movw	r22, r16
 90c:	4a e0       	ldi	r20, 0x0A	; 10
 90e:	50 e0       	ldi	r21, 0x00	; 0
 910:	0e 94 50 05 	call	0xaa0	; 0xaa0 <utoa>

	while(*z!=0)	//Bufferlänge l
 914:	f8 01       	movw	r30, r16
 916:	8e 2f       	mov	r24, r30
 918:	80 1b       	sub	r24, r16
 91a:	91 91       	ld	r25, Z+
 91c:	99 23       	and	r25, r25
 91e:	d9 f7       	brne	.-10     	; 0x916 <usart_putui_0+0x30>
 920:	08 2f       	mov	r16, r24
 922:	04 c0       	rjmp	.+8      	; 0x92c <usart_putui_0+0x46>
		l++;
		z++;
	}
	
	for(n=l;n<sges;n++)
		usart_putc('0');
 924:	80 e3       	ldi	r24, 0x30	; 48
 926:	0e 94 89 03 	call	0x712	; 0x712 <usart_putc>
	{
		l++;
		z++;
	}
	
	for(n=l;n<sges;n++)
 92a:	0f 5f       	subi	r16, 0xFF	; 255
 92c:	80 2f       	mov	r24, r16
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	8e 15       	cp	r24, r14
 932:	9f 05       	cpc	r25, r15
 934:	bc f3       	brlt	.-18     	; 0x924 <usart_putui_0+0x3e>
		usart_putc('0');

	usart_puts(buffer);
 936:	ce 01       	movw	r24, r28
 938:	01 96       	adiw	r24, 0x01	; 1
 93a:	0e 94 8d 03 	call	0x71a	; 0x71a <usart_puts>
}
 93e:	60 96       	adiw	r28, 0x10	; 16
 940:	0f b6       	in	r0, 0x3f	; 63
 942:	f8 94       	cli
 944:	de bf       	out	0x3e, r29	; 62
 946:	0f be       	out	0x3f, r0	; 63
 948:	cd bf       	out	0x3d, r28	; 61
 94a:	cf 91       	pop	r28
 94c:	df 91       	pop	r29
 94e:	1f 91       	pop	r17
 950:	0f 91       	pop	r16
 952:	ff 90       	pop	r15
 954:	ef 90       	pop	r14
 956:	08 95       	ret

00000958 <usart_putui_bin>:
		 usart_putc('0');	// usart_putc(' '); // 0 anstelle von Leerstelle senden
		
	usart_puts(buffer);
}
//--------------------------------------------------------------
void usart_putui_bin(unsigned int zahl, int sges) {
 958:	ef 92       	push	r14
 95a:	ff 92       	push	r15
 95c:	0f 93       	push	r16
 95e:	1f 93       	push	r17
 960:	df 93       	push	r29
 962:	cf 93       	push	r28
 964:	cd b7       	in	r28, 0x3d	; 61
 966:	de b7       	in	r29, 0x3e	; 62
 968:	61 97       	sbiw	r28, 0x11	; 17
 96a:	0f b6       	in	r0, 0x3f	; 63
 96c:	f8 94       	cli
 96e:	de bf       	out	0x3e, r29	; 62
 970:	0f be       	out	0x3f, r0	; 63
 972:	cd bf       	out	0x3d, r28	; 61
 974:	7b 01       	movw	r14, r22
	//Senden der Integerzahl zahl formatiert  mit sges Stellen
	// Das Ausgabeformat ist binär. Leerstellen werden mit 0 aufgefüllt.
	char buffer[17];
	uint8_t l=0,n;
	char *z=buffer;
	utoa(zahl,buffer,2);//Unsigned to String (ASCII)
 976:	8e 01       	movw	r16, r28
 978:	0f 5f       	subi	r16, 0xFF	; 255
 97a:	1f 4f       	sbci	r17, 0xFF	; 255
 97c:	b8 01       	movw	r22, r16
 97e:	42 e0       	ldi	r20, 0x02	; 2
 980:	50 e0       	ldi	r21, 0x00	; 0
 982:	0e 94 50 05 	call	0xaa0	; 0xaa0 <utoa>

	while(*z!=0) //Bufferlänge l
 986:	f8 01       	movw	r30, r16
 988:	8e 2f       	mov	r24, r30
 98a:	80 1b       	sub	r24, r16
 98c:	91 91       	ld	r25, Z+
 98e:	99 23       	and	r25, r25
 990:	d9 f7       	brne	.-10     	; 0x988 <usart_putui_bin+0x30>
 992:	08 2f       	mov	r16, r24
 994:	04 c0       	rjmp	.+8      	; 0x99e <usart_putui_bin+0x46>
		l++;
		z++;
	}
	
	for(n=l;n<sges;n++)
		usart_putc('0');
 996:	80 e3       	ldi	r24, 0x30	; 48
 998:	0e 94 89 03 	call	0x712	; 0x712 <usart_putc>
	{
		l++;
		z++;
	}
	
	for(n=l;n<sges;n++)
 99c:	0f 5f       	subi	r16, 0xFF	; 255
 99e:	80 2f       	mov	r24, r16
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	8e 15       	cp	r24, r14
 9a4:	9f 05       	cpc	r25, r15
 9a6:	bc f3       	brlt	.-18     	; 0x996 <usart_putui_bin+0x3e>
		usart_putc('0');
		
	usart_puts(buffer);
 9a8:	ce 01       	movw	r24, r28
 9aa:	01 96       	adiw	r24, 0x01	; 1
 9ac:	0e 94 8d 03 	call	0x71a	; 0x71a <usart_puts>
}
 9b0:	61 96       	adiw	r28, 0x11	; 17
 9b2:	0f b6       	in	r0, 0x3f	; 63
 9b4:	f8 94       	cli
 9b6:	de bf       	out	0x3e, r29	; 62
 9b8:	0f be       	out	0x3f, r0	; 63
 9ba:	cd bf       	out	0x3d, r28	; 61
 9bc:	cf 91       	pop	r28
 9be:	df 91       	pop	r29
 9c0:	1f 91       	pop	r17
 9c2:	0f 91       	pop	r16
 9c4:	ff 90       	pop	r15
 9c6:	ef 90       	pop	r14
 9c8:	08 95       	ret

000009ca <usart_putb>:
//--------------------------------------------------------------

void usart_putb(uint8_t a) {

	//Senden einer 8-Bit-Zahl binär(TSC)
	usart_putui_bin(a,8);
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	68 e0       	ldi	r22, 0x08	; 8
 9ce:	70 e0       	ldi	r23, 0x00	; 0
 9d0:	0e 94 ac 04 	call	0x958	; 0x958 <usart_putui_bin>
}
 9d4:	08 95       	ret

000009d6 <__udivmodsi4>:
 9d6:	a1 e2       	ldi	r26, 0x21	; 33
 9d8:	1a 2e       	mov	r1, r26
 9da:	aa 1b       	sub	r26, r26
 9dc:	bb 1b       	sub	r27, r27
 9de:	fd 01       	movw	r30, r26
 9e0:	0d c0       	rjmp	.+26     	; 0x9fc <__udivmodsi4_ep>

000009e2 <__udivmodsi4_loop>:
 9e2:	aa 1f       	adc	r26, r26
 9e4:	bb 1f       	adc	r27, r27
 9e6:	ee 1f       	adc	r30, r30
 9e8:	ff 1f       	adc	r31, r31
 9ea:	a2 17       	cp	r26, r18
 9ec:	b3 07       	cpc	r27, r19
 9ee:	e4 07       	cpc	r30, r20
 9f0:	f5 07       	cpc	r31, r21
 9f2:	20 f0       	brcs	.+8      	; 0x9fc <__udivmodsi4_ep>
 9f4:	a2 1b       	sub	r26, r18
 9f6:	b3 0b       	sbc	r27, r19
 9f8:	e4 0b       	sbc	r30, r20
 9fa:	f5 0b       	sbc	r31, r21

000009fc <__udivmodsi4_ep>:
 9fc:	66 1f       	adc	r22, r22
 9fe:	77 1f       	adc	r23, r23
 a00:	88 1f       	adc	r24, r24
 a02:	99 1f       	adc	r25, r25
 a04:	1a 94       	dec	r1
 a06:	69 f7       	brne	.-38     	; 0x9e2 <__udivmodsi4_loop>
 a08:	60 95       	com	r22
 a0a:	70 95       	com	r23
 a0c:	80 95       	com	r24
 a0e:	90 95       	com	r25
 a10:	9b 01       	movw	r18, r22
 a12:	ac 01       	movw	r20, r24
 a14:	bd 01       	movw	r22, r26
 a16:	cf 01       	movw	r24, r30
 a18:	08 95       	ret

00000a1a <dtostrf>:
 a1a:	ef 92       	push	r14
 a1c:	ff 92       	push	r15
 a1e:	0f 93       	push	r16
 a20:	1f 93       	push	r17
 a22:	32 2f       	mov	r19, r18
 a24:	f0 2e       	mov	r15, r16
 a26:	47 ff       	sbrs	r20, 7
 a28:	02 c0       	rjmp	.+4      	; 0xa2e <dtostrf+0x14>
 a2a:	a4 e1       	ldi	r26, 0x14	; 20
 a2c:	01 c0       	rjmp	.+2      	; 0xa30 <dtostrf+0x16>
 a2e:	a4 e0       	ldi	r26, 0x04	; 4
 a30:	e4 2f       	mov	r30, r20
 a32:	ff 27       	eor	r31, r31
 a34:	e7 fd       	sbrc	r30, 7
 a36:	f0 95       	com	r31
 a38:	f7 ff       	sbrs	r31, 7
 a3a:	03 c0       	rjmp	.+6      	; 0xa42 <dtostrf+0x28>
 a3c:	f0 95       	com	r31
 a3e:	e1 95       	neg	r30
 a40:	ff 4f       	sbci	r31, 0xFF	; 255
 a42:	4f 2d       	mov	r20, r15
 a44:	51 2f       	mov	r21, r17
 a46:	2e 2f       	mov	r18, r30
 a48:	03 2f       	mov	r16, r19
 a4a:	ea 2e       	mov	r14, r26
 a4c:	0e 94 66 05 	call	0xacc	; 0xacc <dtoa_prf>
 a50:	8f 2d       	mov	r24, r15
 a52:	91 2f       	mov	r25, r17
 a54:	1f 91       	pop	r17
 a56:	0f 91       	pop	r16
 a58:	ff 90       	pop	r15
 a5a:	ef 90       	pop	r14
 a5c:	08 95       	ret

00000a5e <itoa>:
 a5e:	fb 01       	movw	r30, r22
 a60:	9f 01       	movw	r18, r30
 a62:	e8 94       	clt
 a64:	42 30       	cpi	r20, 0x02	; 2
 a66:	c4 f0       	brlt	.+48     	; 0xa98 <itoa+0x3a>
 a68:	45 32       	cpi	r20, 0x25	; 37
 a6a:	b4 f4       	brge	.+44     	; 0xa98 <itoa+0x3a>
 a6c:	4a 30       	cpi	r20, 0x0A	; 10
 a6e:	29 f4       	brne	.+10     	; 0xa7a <itoa+0x1c>
 a70:	97 fb       	bst	r25, 7
 a72:	1e f4       	brtc	.+6      	; 0xa7a <itoa+0x1c>
 a74:	90 95       	com	r25
 a76:	81 95       	neg	r24
 a78:	9f 4f       	sbci	r25, 0xFF	; 255
 a7a:	64 2f       	mov	r22, r20
 a7c:	77 27       	eor	r23, r23
 a7e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__udivmodhi4>
 a82:	80 5d       	subi	r24, 0xD0	; 208
 a84:	8a 33       	cpi	r24, 0x3A	; 58
 a86:	0c f0       	brlt	.+2      	; 0xa8a <itoa+0x2c>
 a88:	89 5d       	subi	r24, 0xD9	; 217
 a8a:	81 93       	st	Z+, r24
 a8c:	cb 01       	movw	r24, r22
 a8e:	00 97       	sbiw	r24, 0x00	; 0
 a90:	a1 f7       	brne	.-24     	; 0xa7a <itoa+0x1c>
 a92:	16 f4       	brtc	.+4      	; 0xa98 <itoa+0x3a>
 a94:	5d e2       	ldi	r21, 0x2D	; 45
 a96:	51 93       	st	Z+, r21
 a98:	10 82       	st	Z, r1
 a9a:	c9 01       	movw	r24, r18
 a9c:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <strrev>

00000aa0 <utoa>:
 aa0:	fb 01       	movw	r30, r22
 aa2:	9f 01       	movw	r18, r30
 aa4:	42 30       	cpi	r20, 0x02	; 2
 aa6:	74 f0       	brlt	.+28     	; 0xac4 <utoa+0x24>
 aa8:	45 32       	cpi	r20, 0x25	; 37
 aaa:	64 f4       	brge	.+24     	; 0xac4 <utoa+0x24>
 aac:	64 2f       	mov	r22, r20
 aae:	77 27       	eor	r23, r23
 ab0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__udivmodhi4>
 ab4:	80 5d       	subi	r24, 0xD0	; 208
 ab6:	8a 33       	cpi	r24, 0x3A	; 58
 ab8:	0c f0       	brlt	.+2      	; 0xabc <utoa+0x1c>
 aba:	89 5d       	subi	r24, 0xD9	; 217
 abc:	81 93       	st	Z+, r24
 abe:	cb 01       	movw	r24, r22
 ac0:	00 97       	sbiw	r24, 0x00	; 0
 ac2:	a1 f7       	brne	.-24     	; 0xaac <utoa+0xc>
 ac4:	10 82       	st	Z, r1
 ac6:	c9 01       	movw	r24, r18
 ac8:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <strrev>

00000acc <dtoa_prf>:
 acc:	a9 e0       	ldi	r26, 0x09	; 9
 ace:	b0 e0       	ldi	r27, 0x00	; 0
 ad0:	ec e6       	ldi	r30, 0x6C	; 108
 ad2:	f5 e0       	ldi	r31, 0x05	; 5
 ad4:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__prologue_saves__+0x10>
 ad8:	6a 01       	movw	r12, r20
 ada:	f2 2e       	mov	r15, r18
 adc:	10 2f       	mov	r17, r16
 ade:	0c 33       	cpi	r16, 0x3C	; 60
 ae0:	18 f4       	brcc	.+6      	; 0xae8 <dtoa_prf+0x1c>
 ae2:	b0 2e       	mov	r11, r16
 ae4:	b3 94       	inc	r11
 ae6:	02 c0       	rjmp	.+4      	; 0xaec <dtoa_prf+0x20>
 ae8:	ec e3       	ldi	r30, 0x3C	; 60
 aea:	be 2e       	mov	r11, r30
 aec:	ae 01       	movw	r20, r28
 aee:	4f 5f       	subi	r20, 0xFF	; 255
 af0:	5f 4f       	sbci	r21, 0xFF	; 255
 af2:	27 e0       	ldi	r18, 0x07	; 7
 af4:	0b 2d       	mov	r16, r11
 af6:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__ftoa_engine>
 afa:	29 81       	ldd	r18, Y+1	; 0x01
 afc:	30 e0       	ldi	r19, 0x00	; 0
 afe:	a9 01       	movw	r20, r18
 b00:	49 70       	andi	r20, 0x09	; 9
 b02:	50 70       	andi	r21, 0x00	; 0
 b04:	41 30       	cpi	r20, 0x01	; 1
 b06:	51 05       	cpc	r21, r1
 b08:	31 f0       	breq	.+12     	; 0xb16 <dtoa_prf+0x4a>
 b0a:	e1 fc       	sbrc	r14, 1
 b0c:	06 c0       	rjmp	.+12     	; 0xb1a <dtoa_prf+0x4e>
 b0e:	e0 fe       	sbrs	r14, 0
 b10:	06 c0       	rjmp	.+12     	; 0xb1e <dtoa_prf+0x52>
 b12:	e0 e2       	ldi	r30, 0x20	; 32
 b14:	05 c0       	rjmp	.+10     	; 0xb20 <dtoa_prf+0x54>
 b16:	ed e2       	ldi	r30, 0x2D	; 45
 b18:	03 c0       	rjmp	.+6      	; 0xb20 <dtoa_prf+0x54>
 b1a:	eb e2       	ldi	r30, 0x2B	; 43
 b1c:	01 c0       	rjmp	.+2      	; 0xb20 <dtoa_prf+0x54>
 b1e:	e0 e0       	ldi	r30, 0x00	; 0
 b20:	23 ff       	sbrs	r18, 3
 b22:	37 c0       	rjmp	.+110    	; 0xb92 <dtoa_prf+0xc6>
 b24:	ee 23       	and	r30, r30
 b26:	11 f0       	breq	.+4      	; 0xb2c <dtoa_prf+0x60>
 b28:	84 e0       	ldi	r24, 0x04	; 4
 b2a:	01 c0       	rjmp	.+2      	; 0xb2e <dtoa_prf+0x62>
 b2c:	83 e0       	ldi	r24, 0x03	; 3
 b2e:	8f 15       	cp	r24, r15
 b30:	18 f4       	brcc	.+6      	; 0xb38 <dtoa_prf+0x6c>
 b32:	f8 1a       	sub	r15, r24
 b34:	8f 2d       	mov	r24, r15
 b36:	01 c0       	rjmp	.+2      	; 0xb3a <dtoa_prf+0x6e>
 b38:	80 e0       	ldi	r24, 0x00	; 0
 b3a:	e4 fc       	sbrc	r14, 4
 b3c:	0b c0       	rjmp	.+22     	; 0xb54 <dtoa_prf+0x88>
 b3e:	98 2f       	mov	r25, r24
 b40:	d6 01       	movw	r26, r12
 b42:	20 e2       	ldi	r18, 0x20	; 32
 b44:	02 c0       	rjmp	.+4      	; 0xb4a <dtoa_prf+0x7e>
 b46:	2d 93       	st	X+, r18
 b48:	91 50       	subi	r25, 0x01	; 1
 b4a:	99 23       	and	r25, r25
 b4c:	e1 f7       	brne	.-8      	; 0xb46 <dtoa_prf+0x7a>
 b4e:	c8 0e       	add	r12, r24
 b50:	d1 1c       	adc	r13, r1
 b52:	80 e0       	ldi	r24, 0x00	; 0
 b54:	ee 23       	and	r30, r30
 b56:	19 f0       	breq	.+6      	; 0xb5e <dtoa_prf+0x92>
 b58:	d6 01       	movw	r26, r12
 b5a:	ed 93       	st	X+, r30
 b5c:	6d 01       	movw	r12, r26
 b5e:	f6 01       	movw	r30, r12
 b60:	31 96       	adiw	r30, 0x01	; 1
 b62:	e2 fe       	sbrs	r14, 2
 b64:	05 c0       	rjmp	.+10     	; 0xb70 <dtoa_prf+0xa4>
 b66:	9e e4       	ldi	r25, 0x4E	; 78
 b68:	d6 01       	movw	r26, r12
 b6a:	9c 93       	st	X, r25
 b6c:	21 e4       	ldi	r18, 0x41	; 65
 b6e:	04 c0       	rjmp	.+8      	; 0xb78 <dtoa_prf+0xac>
 b70:	9e e6       	ldi	r25, 0x6E	; 110
 b72:	d6 01       	movw	r26, r12
 b74:	9c 93       	st	X, r25
 b76:	21 e6       	ldi	r18, 0x61	; 97
 b78:	11 96       	adiw	r26, 0x01	; 1
 b7a:	2c 93       	st	X, r18
 b7c:	91 83       	std	Z+1, r25	; 0x01
 b7e:	32 96       	adiw	r30, 0x02	; 2
 b80:	98 2f       	mov	r25, r24
 b82:	df 01       	movw	r26, r30
 b84:	20 e2       	ldi	r18, 0x20	; 32
 b86:	02 c0       	rjmp	.+4      	; 0xb8c <dtoa_prf+0xc0>
 b88:	2d 93       	st	X+, r18
 b8a:	91 50       	subi	r25, 0x01	; 1
 b8c:	99 23       	and	r25, r25
 b8e:	e1 f7       	brne	.-8      	; 0xb88 <dtoa_prf+0xbc>
 b90:	3d c0       	rjmp	.+122    	; 0xc0c <dtoa_prf+0x140>
 b92:	22 ff       	sbrs	r18, 2
 b94:	41 c0       	rjmp	.+130    	; 0xc18 <dtoa_prf+0x14c>
 b96:	ee 23       	and	r30, r30
 b98:	11 f0       	breq	.+4      	; 0xb9e <dtoa_prf+0xd2>
 b9a:	84 e0       	ldi	r24, 0x04	; 4
 b9c:	01 c0       	rjmp	.+2      	; 0xba0 <dtoa_prf+0xd4>
 b9e:	83 e0       	ldi	r24, 0x03	; 3
 ba0:	8f 15       	cp	r24, r15
 ba2:	18 f4       	brcc	.+6      	; 0xbaa <dtoa_prf+0xde>
 ba4:	f8 1a       	sub	r15, r24
 ba6:	8f 2d       	mov	r24, r15
 ba8:	01 c0       	rjmp	.+2      	; 0xbac <dtoa_prf+0xe0>
 baa:	80 e0       	ldi	r24, 0x00	; 0
 bac:	e4 fc       	sbrc	r14, 4
 bae:	0b c0       	rjmp	.+22     	; 0xbc6 <dtoa_prf+0xfa>
 bb0:	98 2f       	mov	r25, r24
 bb2:	d6 01       	movw	r26, r12
 bb4:	20 e2       	ldi	r18, 0x20	; 32
 bb6:	02 c0       	rjmp	.+4      	; 0xbbc <dtoa_prf+0xf0>
 bb8:	2d 93       	st	X+, r18
 bba:	91 50       	subi	r25, 0x01	; 1
 bbc:	99 23       	and	r25, r25
 bbe:	e1 f7       	brne	.-8      	; 0xbb8 <dtoa_prf+0xec>
 bc0:	c8 0e       	add	r12, r24
 bc2:	d1 1c       	adc	r13, r1
 bc4:	80 e0       	ldi	r24, 0x00	; 0
 bc6:	ee 23       	and	r30, r30
 bc8:	19 f0       	breq	.+6      	; 0xbd0 <dtoa_prf+0x104>
 bca:	d6 01       	movw	r26, r12
 bcc:	ed 93       	st	X+, r30
 bce:	6d 01       	movw	r12, r26
 bd0:	f6 01       	movw	r30, r12
 bd2:	31 96       	adiw	r30, 0x01	; 1
 bd4:	e2 fe       	sbrs	r14, 2
 bd6:	09 c0       	rjmp	.+18     	; 0xbea <dtoa_prf+0x11e>
 bd8:	99 e4       	ldi	r25, 0x49	; 73
 bda:	d6 01       	movw	r26, r12
 bdc:	9c 93       	st	X, r25
 bde:	9e e4       	ldi	r25, 0x4E	; 78
 be0:	11 96       	adiw	r26, 0x01	; 1
 be2:	9c 93       	st	X, r25
 be4:	11 97       	sbiw	r26, 0x01	; 1
 be6:	96 e4       	ldi	r25, 0x46	; 70
 be8:	07 c0       	rjmp	.+14     	; 0xbf8 <dtoa_prf+0x12c>
 bea:	99 e6       	ldi	r25, 0x69	; 105
 bec:	d6 01       	movw	r26, r12
 bee:	9c 93       	st	X, r25
 bf0:	9e e6       	ldi	r25, 0x6E	; 110
 bf2:	11 96       	adiw	r26, 0x01	; 1
 bf4:	9c 93       	st	X, r25
 bf6:	96 e6       	ldi	r25, 0x66	; 102
 bf8:	91 83       	std	Z+1, r25	; 0x01
 bfa:	32 96       	adiw	r30, 0x02	; 2
 bfc:	98 2f       	mov	r25, r24
 bfe:	df 01       	movw	r26, r30
 c00:	20 e2       	ldi	r18, 0x20	; 32
 c02:	02 c0       	rjmp	.+4      	; 0xc08 <dtoa_prf+0x13c>
 c04:	2d 93       	st	X+, r18
 c06:	91 50       	subi	r25, 0x01	; 1
 c08:	99 23       	and	r25, r25
 c0a:	e1 f7       	brne	.-8      	; 0xc04 <dtoa_prf+0x138>
 c0c:	e8 0f       	add	r30, r24
 c0e:	f1 1d       	adc	r31, r1
 c10:	10 82       	st	Z, r1
 c12:	2e ef       	ldi	r18, 0xFE	; 254
 c14:	3f ef       	ldi	r19, 0xFF	; 255
 c16:	ac c0       	rjmp	.+344    	; 0xd70 <dtoa_prf+0x2a4>
 c18:	41 e0       	ldi	r20, 0x01	; 1
 c1a:	50 e0       	ldi	r21, 0x00	; 0
 c1c:	ee 23       	and	r30, r30
 c1e:	11 f4       	brne	.+4      	; 0xc24 <dtoa_prf+0x158>
 c20:	40 e0       	ldi	r20, 0x00	; 0
 c22:	50 e0       	ldi	r21, 0x00	; 0
 c24:	18 16       	cp	r1, r24
 c26:	19 06       	cpc	r1, r25
 c28:	24 f4       	brge	.+8      	; 0xc32 <dtoa_prf+0x166>
 c2a:	bc 01       	movw	r22, r24
 c2c:	6f 5f       	subi	r22, 0xFF	; 255
 c2e:	7f 4f       	sbci	r23, 0xFF	; 255
 c30:	02 c0       	rjmp	.+4      	; 0xc36 <dtoa_prf+0x16a>
 c32:	61 e0       	ldi	r22, 0x01	; 1
 c34:	70 e0       	ldi	r23, 0x00	; 0
 c36:	64 0f       	add	r22, r20
 c38:	75 1f       	adc	r23, r21
 c3a:	11 23       	and	r17, r17
 c3c:	29 f0       	breq	.+10     	; 0xc48 <dtoa_prf+0x17c>
 c3e:	41 2f       	mov	r20, r17
 c40:	50 e0       	ldi	r21, 0x00	; 0
 c42:	4f 5f       	subi	r20, 0xFF	; 255
 c44:	5f 4f       	sbci	r21, 0xFF	; 255
 c46:	02 c0       	rjmp	.+4      	; 0xc4c <dtoa_prf+0x180>
 c48:	40 e0       	ldi	r20, 0x00	; 0
 c4a:	50 e0       	ldi	r21, 0x00	; 0
 c4c:	46 0f       	add	r20, r22
 c4e:	57 1f       	adc	r21, r23
 c50:	6f 2d       	mov	r22, r15
 c52:	70 e0       	ldi	r23, 0x00	; 0
 c54:	46 17       	cp	r20, r22
 c56:	57 07       	cpc	r21, r23
 c58:	1c f4       	brge	.+6      	; 0xc60 <dtoa_prf+0x194>
 c5a:	0f 2d       	mov	r16, r15
 c5c:	04 1b       	sub	r16, r20
 c5e:	01 c0       	rjmp	.+2      	; 0xc62 <dtoa_prf+0x196>
 c60:	00 e0       	ldi	r16, 0x00	; 0
 c62:	ff 24       	eor	r15, r15
 c64:	a7 01       	movw	r20, r14
 c66:	40 71       	andi	r20, 0x10	; 16
 c68:	50 70       	andi	r21, 0x00	; 0
 c6a:	e4 fc       	sbrc	r14, 4
 c6c:	0d c0       	rjmp	.+26     	; 0xc88 <dtoa_prf+0x1bc>
 c6e:	e3 fc       	sbrc	r14, 3
 c70:	0b c0       	rjmp	.+22     	; 0xc88 <dtoa_prf+0x1bc>
 c72:	60 2f       	mov	r22, r16
 c74:	d6 01       	movw	r26, r12
 c76:	70 e2       	ldi	r23, 0x20	; 32
 c78:	02 c0       	rjmp	.+4      	; 0xc7e <dtoa_prf+0x1b2>
 c7a:	7d 93       	st	X+, r23
 c7c:	61 50       	subi	r22, 0x01	; 1
 c7e:	66 23       	and	r22, r22
 c80:	e1 f7       	brne	.-8      	; 0xc7a <dtoa_prf+0x1ae>
 c82:	c0 0e       	add	r12, r16
 c84:	d1 1c       	adc	r13, r1
 c86:	00 e0       	ldi	r16, 0x00	; 0
 c88:	ee 23       	and	r30, r30
 c8a:	19 f0       	breq	.+6      	; 0xc92 <dtoa_prf+0x1c6>
 c8c:	d6 01       	movw	r26, r12
 c8e:	ed 93       	st	X+, r30
 c90:	6d 01       	movw	r12, r26
 c92:	41 15       	cp	r20, r1
 c94:	51 05       	cpc	r21, r1
 c96:	59 f4       	brne	.+22     	; 0xcae <dtoa_prf+0x1e2>
 c98:	40 2f       	mov	r20, r16
 c9a:	f6 01       	movw	r30, r12
 c9c:	50 e3       	ldi	r21, 0x30	; 48
 c9e:	02 c0       	rjmp	.+4      	; 0xca4 <dtoa_prf+0x1d8>
 ca0:	51 93       	st	Z+, r21
 ca2:	41 50       	subi	r20, 0x01	; 1
 ca4:	44 23       	and	r20, r20
 ca6:	e1 f7       	brne	.-8      	; 0xca0 <dtoa_prf+0x1d4>
 ca8:	c0 0e       	add	r12, r16
 caa:	d1 1c       	adc	r13, r1
 cac:	00 e0       	ldi	r16, 0x00	; 0
 cae:	b8 0e       	add	r11, r24
 cb0:	fa 80       	ldd	r15, Y+2	; 0x02
 cb2:	a9 01       	movw	r20, r18
 cb4:	40 71       	andi	r20, 0x10	; 16
 cb6:	50 70       	andi	r21, 0x00	; 0
 cb8:	24 ff       	sbrs	r18, 4
 cba:	04 c0       	rjmp	.+8      	; 0xcc4 <dtoa_prf+0x1f8>
 cbc:	bf 2d       	mov	r27, r15
 cbe:	b1 33       	cpi	r27, 0x31	; 49
 cc0:	09 f4       	brne	.+2      	; 0xcc4 <dtoa_prf+0x1f8>
 cc2:	ba 94       	dec	r11
 cc4:	1b 14       	cp	r1, r11
 cc6:	2c f4       	brge	.+10     	; 0xcd2 <dtoa_prf+0x206>
 cc8:	ab 2d       	mov	r26, r11
 cca:	a9 30       	cpi	r26, 0x09	; 9
 ccc:	18 f0       	brcs	.+6      	; 0xcd4 <dtoa_prf+0x208>
 cce:	a8 e0       	ldi	r26, 0x08	; 8
 cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <dtoa_prf+0x208>
 cd2:	a1 e0       	ldi	r26, 0x01	; 1
 cd4:	9c 01       	movw	r18, r24
 cd6:	97 ff       	sbrs	r25, 7
 cd8:	02 c0       	rjmp	.+4      	; 0xcde <dtoa_prf+0x212>
 cda:	20 e0       	ldi	r18, 0x00	; 0
 cdc:	30 e0       	ldi	r19, 0x00	; 0
 cde:	bc 01       	movw	r22, r24
 ce0:	6f 5f       	subi	r22, 0xFF	; 255
 ce2:	7f 4f       	sbci	r23, 0xFF	; 255
 ce4:	62 1b       	sub	r22, r18
 ce6:	73 0b       	sbc	r23, r19
 ce8:	fe 01       	movw	r30, r28
 cea:	31 96       	adiw	r30, 0x01	; 1
 cec:	e6 0f       	add	r30, r22
 cee:	f7 1f       	adc	r31, r23
 cf0:	6e e2       	ldi	r22, 0x2E	; 46
 cf2:	e6 2e       	mov	r14, r22
 cf4:	bc 01       	movw	r22, r24
 cf6:	6a 1b       	sub	r22, r26
 cf8:	71 09       	sbc	r23, r1
 cfa:	a1 2f       	mov	r26, r17
 cfc:	b0 e0       	ldi	r27, 0x00	; 0
 cfe:	aa 24       	eor	r10, r10
 d00:	bb 24       	eor	r11, r11
 d02:	aa 1a       	sub	r10, r26
 d04:	bb 0a       	sbc	r11, r27
 d06:	1f ef       	ldi	r17, 0xFF	; 255
 d08:	2f 3f       	cpi	r18, 0xFF	; 255
 d0a:	31 07       	cpc	r19, r17
 d0c:	19 f4       	brne	.+6      	; 0xd14 <dtoa_prf+0x248>
 d0e:	d6 01       	movw	r26, r12
 d10:	ed 92       	st	X+, r14
 d12:	6d 01       	movw	r12, r26
 d14:	82 17       	cp	r24, r18
 d16:	93 07       	cpc	r25, r19
 d18:	2c f0       	brlt	.+10     	; 0xd24 <dtoa_prf+0x258>
 d1a:	62 17       	cp	r22, r18
 d1c:	73 07       	cpc	r23, r19
 d1e:	14 f4       	brge	.+4      	; 0xd24 <dtoa_prf+0x258>
 d20:	10 81       	ld	r17, Z
 d22:	01 c0       	rjmp	.+2      	; 0xd26 <dtoa_prf+0x25a>
 d24:	10 e3       	ldi	r17, 0x30	; 48
 d26:	21 50       	subi	r18, 0x01	; 1
 d28:	30 40       	sbci	r19, 0x00	; 0
 d2a:	31 96       	adiw	r30, 0x01	; 1
 d2c:	2a 15       	cp	r18, r10
 d2e:	3b 05       	cpc	r19, r11
 d30:	24 f0       	brlt	.+8      	; 0xd3a <dtoa_prf+0x26e>
 d32:	d6 01       	movw	r26, r12
 d34:	1d 93       	st	X+, r17
 d36:	6d 01       	movw	r12, r26
 d38:	e6 cf       	rjmp	.-52     	; 0xd06 <dtoa_prf+0x23a>
 d3a:	28 17       	cp	r18, r24
 d3c:	39 07       	cpc	r19, r25
 d3e:	49 f4       	brne	.+18     	; 0xd52 <dtoa_prf+0x286>
 d40:	bf 2d       	mov	r27, r15
 d42:	b6 33       	cpi	r27, 0x36	; 54
 d44:	28 f4       	brcc	.+10     	; 0xd50 <dtoa_prf+0x284>
 d46:	b5 33       	cpi	r27, 0x35	; 53
 d48:	21 f4       	brne	.+8      	; 0xd52 <dtoa_prf+0x286>
 d4a:	41 15       	cp	r20, r1
 d4c:	51 05       	cpc	r21, r1
 d4e:	09 f4       	brne	.+2      	; 0xd52 <dtoa_prf+0x286>
 d50:	11 e3       	ldi	r17, 0x31	; 49
 d52:	f6 01       	movw	r30, r12
 d54:	11 93       	st	Z+, r17
 d56:	80 2f       	mov	r24, r16
 d58:	df 01       	movw	r26, r30
 d5a:	90 e2       	ldi	r25, 0x20	; 32
 d5c:	02 c0       	rjmp	.+4      	; 0xd62 <dtoa_prf+0x296>
 d5e:	9d 93       	st	X+, r25
 d60:	81 50       	subi	r24, 0x01	; 1
 d62:	88 23       	and	r24, r24
 d64:	e1 f7       	brne	.-8      	; 0xd5e <dtoa_prf+0x292>
 d66:	e0 0f       	add	r30, r16
 d68:	f1 1d       	adc	r31, r1
 d6a:	10 82       	st	Z, r1
 d6c:	20 e0       	ldi	r18, 0x00	; 0
 d6e:	30 e0       	ldi	r19, 0x00	; 0
 d70:	c9 01       	movw	r24, r18
 d72:	29 96       	adiw	r28, 0x09	; 9
 d74:	ea e0       	ldi	r30, 0x0A	; 10
 d76:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__epilogue_restores__+0x10>

00000d7a <__ftoa_engine>:
 d7a:	28 30       	cpi	r18, 0x08	; 8
 d7c:	08 f0       	brcs	.+2      	; 0xd80 <__ftoa_engine+0x6>
 d7e:	27 e0       	ldi	r18, 0x07	; 7
 d80:	33 27       	eor	r19, r19
 d82:	da 01       	movw	r26, r20
 d84:	99 0f       	add	r25, r25
 d86:	31 1d       	adc	r19, r1
 d88:	87 fd       	sbrc	r24, 7
 d8a:	91 60       	ori	r25, 0x01	; 1
 d8c:	00 96       	adiw	r24, 0x00	; 0
 d8e:	61 05       	cpc	r22, r1
 d90:	71 05       	cpc	r23, r1
 d92:	39 f4       	brne	.+14     	; 0xda2 <__ftoa_engine+0x28>
 d94:	32 60       	ori	r19, 0x02	; 2
 d96:	2e 5f       	subi	r18, 0xFE	; 254
 d98:	3d 93       	st	X+, r19
 d9a:	30 e3       	ldi	r19, 0x30	; 48
 d9c:	2a 95       	dec	r18
 d9e:	e1 f7       	brne	.-8      	; 0xd98 <__ftoa_engine+0x1e>
 da0:	08 95       	ret
 da2:	9f 3f       	cpi	r25, 0xFF	; 255
 da4:	30 f0       	brcs	.+12     	; 0xdb2 <__ftoa_engine+0x38>
 da6:	80 38       	cpi	r24, 0x80	; 128
 da8:	71 05       	cpc	r23, r1
 daa:	61 05       	cpc	r22, r1
 dac:	09 f0       	breq	.+2      	; 0xdb0 <__ftoa_engine+0x36>
 dae:	3c 5f       	subi	r19, 0xFC	; 252
 db0:	3c 5f       	subi	r19, 0xFC	; 252
 db2:	3d 93       	st	X+, r19
 db4:	91 30       	cpi	r25, 0x01	; 1
 db6:	08 f0       	brcs	.+2      	; 0xdba <__ftoa_engine+0x40>
 db8:	80 68       	ori	r24, 0x80	; 128
 dba:	91 1d       	adc	r25, r1
 dbc:	df 93       	push	r29
 dbe:	cf 93       	push	r28
 dc0:	1f 93       	push	r17
 dc2:	0f 93       	push	r16
 dc4:	ff 92       	push	r15
 dc6:	ef 92       	push	r14
 dc8:	19 2f       	mov	r17, r25
 dca:	98 7f       	andi	r25, 0xF8	; 248
 dcc:	96 95       	lsr	r25
 dce:	e9 2f       	mov	r30, r25
 dd0:	96 95       	lsr	r25
 dd2:	96 95       	lsr	r25
 dd4:	e9 0f       	add	r30, r25
 dd6:	ff 27       	eor	r31, r31
 dd8:	e2 55       	subi	r30, 0x52	; 82
 dda:	ff 4f       	sbci	r31, 0xFF	; 255
 ddc:	99 27       	eor	r25, r25
 dde:	33 27       	eor	r19, r19
 de0:	ee 24       	eor	r14, r14
 de2:	ff 24       	eor	r15, r15
 de4:	a7 01       	movw	r20, r14
 de6:	e7 01       	movw	r28, r14
 de8:	05 90       	lpm	r0, Z+
 dea:	08 94       	sec
 dec:	07 94       	ror	r0
 dee:	28 f4       	brcc	.+10     	; 0xdfa <__ftoa_engine+0x80>
 df0:	36 0f       	add	r19, r22
 df2:	e7 1e       	adc	r14, r23
 df4:	f8 1e       	adc	r15, r24
 df6:	49 1f       	adc	r20, r25
 df8:	51 1d       	adc	r21, r1
 dfa:	66 0f       	add	r22, r22
 dfc:	77 1f       	adc	r23, r23
 dfe:	88 1f       	adc	r24, r24
 e00:	99 1f       	adc	r25, r25
 e02:	06 94       	lsr	r0
 e04:	a1 f7       	brne	.-24     	; 0xdee <__ftoa_engine+0x74>
 e06:	05 90       	lpm	r0, Z+
 e08:	07 94       	ror	r0
 e0a:	28 f4       	brcc	.+10     	; 0xe16 <__ftoa_engine+0x9c>
 e0c:	e7 0e       	add	r14, r23
 e0e:	f8 1e       	adc	r15, r24
 e10:	49 1f       	adc	r20, r25
 e12:	56 1f       	adc	r21, r22
 e14:	c1 1d       	adc	r28, r1
 e16:	77 0f       	add	r23, r23
 e18:	88 1f       	adc	r24, r24
 e1a:	99 1f       	adc	r25, r25
 e1c:	66 1f       	adc	r22, r22
 e1e:	06 94       	lsr	r0
 e20:	a1 f7       	brne	.-24     	; 0xe0a <__ftoa_engine+0x90>
 e22:	05 90       	lpm	r0, Z+
 e24:	07 94       	ror	r0
 e26:	28 f4       	brcc	.+10     	; 0xe32 <__ftoa_engine+0xb8>
 e28:	f8 0e       	add	r15, r24
 e2a:	49 1f       	adc	r20, r25
 e2c:	56 1f       	adc	r21, r22
 e2e:	c7 1f       	adc	r28, r23
 e30:	d1 1d       	adc	r29, r1
 e32:	88 0f       	add	r24, r24
 e34:	99 1f       	adc	r25, r25
 e36:	66 1f       	adc	r22, r22
 e38:	77 1f       	adc	r23, r23
 e3a:	06 94       	lsr	r0
 e3c:	a1 f7       	brne	.-24     	; 0xe26 <__ftoa_engine+0xac>
 e3e:	05 90       	lpm	r0, Z+
 e40:	07 94       	ror	r0
 e42:	20 f4       	brcc	.+8      	; 0xe4c <__ftoa_engine+0xd2>
 e44:	49 0f       	add	r20, r25
 e46:	56 1f       	adc	r21, r22
 e48:	c7 1f       	adc	r28, r23
 e4a:	d8 1f       	adc	r29, r24
 e4c:	99 0f       	add	r25, r25
 e4e:	66 1f       	adc	r22, r22
 e50:	77 1f       	adc	r23, r23
 e52:	88 1f       	adc	r24, r24
 e54:	06 94       	lsr	r0
 e56:	a9 f7       	brne	.-22     	; 0xe42 <__ftoa_engine+0xc8>
 e58:	84 91       	lpm	r24, Z+
 e5a:	10 95       	com	r17
 e5c:	17 70       	andi	r17, 0x07	; 7
 e5e:	41 f0       	breq	.+16     	; 0xe70 <__ftoa_engine+0xf6>
 e60:	d6 95       	lsr	r29
 e62:	c7 95       	ror	r28
 e64:	57 95       	ror	r21
 e66:	47 95       	ror	r20
 e68:	f7 94       	ror	r15
 e6a:	e7 94       	ror	r14
 e6c:	1a 95       	dec	r17
 e6e:	c1 f7       	brne	.-16     	; 0xe60 <__ftoa_engine+0xe6>
 e70:	e4 e5       	ldi	r30, 0x54	; 84
 e72:	f0 e0       	ldi	r31, 0x00	; 0
 e74:	68 94       	set
 e76:	15 90       	lpm	r1, Z+
 e78:	15 91       	lpm	r17, Z+
 e7a:	35 91       	lpm	r19, Z+
 e7c:	65 91       	lpm	r22, Z+
 e7e:	95 91       	lpm	r25, Z+
 e80:	05 90       	lpm	r0, Z+
 e82:	7f e2       	ldi	r23, 0x2F	; 47
 e84:	73 95       	inc	r23
 e86:	e1 18       	sub	r14, r1
 e88:	f1 0a       	sbc	r15, r17
 e8a:	43 0b       	sbc	r20, r19
 e8c:	56 0b       	sbc	r21, r22
 e8e:	c9 0b       	sbc	r28, r25
 e90:	d0 09       	sbc	r29, r0
 e92:	c0 f7       	brcc	.-16     	; 0xe84 <__ftoa_engine+0x10a>
 e94:	e1 0c       	add	r14, r1
 e96:	f1 1e       	adc	r15, r17
 e98:	43 1f       	adc	r20, r19
 e9a:	56 1f       	adc	r21, r22
 e9c:	c9 1f       	adc	r28, r25
 e9e:	d0 1d       	adc	r29, r0
 ea0:	7e f4       	brtc	.+30     	; 0xec0 <__ftoa_engine+0x146>
 ea2:	70 33       	cpi	r23, 0x30	; 48
 ea4:	11 f4       	brne	.+4      	; 0xeaa <__ftoa_engine+0x130>
 ea6:	8a 95       	dec	r24
 ea8:	e6 cf       	rjmp	.-52     	; 0xe76 <__ftoa_engine+0xfc>
 eaa:	e8 94       	clt
 eac:	01 50       	subi	r16, 0x01	; 1
 eae:	30 f0       	brcs	.+12     	; 0xebc <__ftoa_engine+0x142>
 eb0:	08 0f       	add	r16, r24
 eb2:	0a f4       	brpl	.+2      	; 0xeb6 <__ftoa_engine+0x13c>
 eb4:	00 27       	eor	r16, r16
 eb6:	02 17       	cp	r16, r18
 eb8:	08 f4       	brcc	.+2      	; 0xebc <__ftoa_engine+0x142>
 eba:	20 2f       	mov	r18, r16
 ebc:	23 95       	inc	r18
 ebe:	02 2f       	mov	r16, r18
 ec0:	7a 33       	cpi	r23, 0x3A	; 58
 ec2:	28 f0       	brcs	.+10     	; 0xece <__ftoa_engine+0x154>
 ec4:	79 e3       	ldi	r23, 0x39	; 57
 ec6:	7d 93       	st	X+, r23
 ec8:	2a 95       	dec	r18
 eca:	e9 f7       	brne	.-6      	; 0xec6 <__ftoa_engine+0x14c>
 ecc:	10 c0       	rjmp	.+32     	; 0xeee <__ftoa_engine+0x174>
 ece:	7d 93       	st	X+, r23
 ed0:	2a 95       	dec	r18
 ed2:	89 f6       	brne	.-94     	; 0xe76 <__ftoa_engine+0xfc>
 ed4:	06 94       	lsr	r0
 ed6:	97 95       	ror	r25
 ed8:	67 95       	ror	r22
 eda:	37 95       	ror	r19
 edc:	17 95       	ror	r17
 ede:	17 94       	ror	r1
 ee0:	e1 18       	sub	r14, r1
 ee2:	f1 0a       	sbc	r15, r17
 ee4:	43 0b       	sbc	r20, r19
 ee6:	56 0b       	sbc	r21, r22
 ee8:	c9 0b       	sbc	r28, r25
 eea:	d0 09       	sbc	r29, r0
 eec:	98 f0       	brcs	.+38     	; 0xf14 <__ftoa_engine+0x19a>
 eee:	23 95       	inc	r18
 ef0:	7e 91       	ld	r23, -X
 ef2:	73 95       	inc	r23
 ef4:	7a 33       	cpi	r23, 0x3A	; 58
 ef6:	08 f0       	brcs	.+2      	; 0xefa <__ftoa_engine+0x180>
 ef8:	70 e3       	ldi	r23, 0x30	; 48
 efa:	7c 93       	st	X, r23
 efc:	20 13       	cpse	r18, r16
 efe:	b8 f7       	brcc	.-18     	; 0xeee <__ftoa_engine+0x174>
 f00:	7e 91       	ld	r23, -X
 f02:	70 61       	ori	r23, 0x10	; 16
 f04:	7d 93       	st	X+, r23
 f06:	30 f0       	brcs	.+12     	; 0xf14 <__ftoa_engine+0x19a>
 f08:	83 95       	inc	r24
 f0a:	71 e3       	ldi	r23, 0x31	; 49
 f0c:	7d 93       	st	X+, r23
 f0e:	70 e3       	ldi	r23, 0x30	; 48
 f10:	2a 95       	dec	r18
 f12:	e1 f7       	brne	.-8      	; 0xf0c <__ftoa_engine+0x192>
 f14:	11 24       	eor	r1, r1
 f16:	ef 90       	pop	r14
 f18:	ff 90       	pop	r15
 f1a:	0f 91       	pop	r16
 f1c:	1f 91       	pop	r17
 f1e:	cf 91       	pop	r28
 f20:	df 91       	pop	r29
 f22:	99 27       	eor	r25, r25
 f24:	87 fd       	sbrc	r24, 7
 f26:	90 95       	com	r25
 f28:	08 95       	ret

00000f2a <strrev>:
 f2a:	dc 01       	movw	r26, r24
 f2c:	fc 01       	movw	r30, r24
 f2e:	67 2f       	mov	r22, r23
 f30:	71 91       	ld	r23, Z+
 f32:	77 23       	and	r23, r23
 f34:	e1 f7       	brne	.-8      	; 0xf2e <strrev+0x4>
 f36:	32 97       	sbiw	r30, 0x02	; 2
 f38:	04 c0       	rjmp	.+8      	; 0xf42 <strrev+0x18>
 f3a:	7c 91       	ld	r23, X
 f3c:	6d 93       	st	X+, r22
 f3e:	70 83       	st	Z, r23
 f40:	62 91       	ld	r22, -Z
 f42:	ae 17       	cp	r26, r30
 f44:	bf 07       	cpc	r27, r31
 f46:	c8 f3       	brcs	.-14     	; 0xf3a <strrev+0x10>
 f48:	08 95       	ret

00000f4a <__udivmodhi4>:
 f4a:	aa 1b       	sub	r26, r26
 f4c:	bb 1b       	sub	r27, r27
 f4e:	51 e1       	ldi	r21, 0x11	; 17
 f50:	07 c0       	rjmp	.+14     	; 0xf60 <__udivmodhi4_ep>

00000f52 <__udivmodhi4_loop>:
 f52:	aa 1f       	adc	r26, r26
 f54:	bb 1f       	adc	r27, r27
 f56:	a6 17       	cp	r26, r22
 f58:	b7 07       	cpc	r27, r23
 f5a:	10 f0       	brcs	.+4      	; 0xf60 <__udivmodhi4_ep>
 f5c:	a6 1b       	sub	r26, r22
 f5e:	b7 0b       	sbc	r27, r23

00000f60 <__udivmodhi4_ep>:
 f60:	88 1f       	adc	r24, r24
 f62:	99 1f       	adc	r25, r25
 f64:	5a 95       	dec	r21
 f66:	a9 f7       	brne	.-22     	; 0xf52 <__udivmodhi4_loop>
 f68:	80 95       	com	r24
 f6a:	90 95       	com	r25
 f6c:	bc 01       	movw	r22, r24
 f6e:	cd 01       	movw	r24, r26
 f70:	08 95       	ret

00000f72 <__prologue_saves__>:
 f72:	2f 92       	push	r2
 f74:	3f 92       	push	r3
 f76:	4f 92       	push	r4
 f78:	5f 92       	push	r5
 f7a:	6f 92       	push	r6
 f7c:	7f 92       	push	r7
 f7e:	8f 92       	push	r8
 f80:	9f 92       	push	r9
 f82:	af 92       	push	r10
 f84:	bf 92       	push	r11
 f86:	cf 92       	push	r12
 f88:	df 92       	push	r13
 f8a:	ef 92       	push	r14
 f8c:	ff 92       	push	r15
 f8e:	0f 93       	push	r16
 f90:	1f 93       	push	r17
 f92:	cf 93       	push	r28
 f94:	df 93       	push	r29
 f96:	cd b7       	in	r28, 0x3d	; 61
 f98:	de b7       	in	r29, 0x3e	; 62
 f9a:	ca 1b       	sub	r28, r26
 f9c:	db 0b       	sbc	r29, r27
 f9e:	0f b6       	in	r0, 0x3f	; 63
 fa0:	f8 94       	cli
 fa2:	de bf       	out	0x3e, r29	; 62
 fa4:	0f be       	out	0x3f, r0	; 63
 fa6:	cd bf       	out	0x3d, r28	; 61
 fa8:	09 94       	ijmp

00000faa <__epilogue_restores__>:
 faa:	2a 88       	ldd	r2, Y+18	; 0x12
 fac:	39 88       	ldd	r3, Y+17	; 0x11
 fae:	48 88       	ldd	r4, Y+16	; 0x10
 fb0:	5f 84       	ldd	r5, Y+15	; 0x0f
 fb2:	6e 84       	ldd	r6, Y+14	; 0x0e
 fb4:	7d 84       	ldd	r7, Y+13	; 0x0d
 fb6:	8c 84       	ldd	r8, Y+12	; 0x0c
 fb8:	9b 84       	ldd	r9, Y+11	; 0x0b
 fba:	aa 84       	ldd	r10, Y+10	; 0x0a
 fbc:	b9 84       	ldd	r11, Y+9	; 0x09
 fbe:	c8 84       	ldd	r12, Y+8	; 0x08
 fc0:	df 80       	ldd	r13, Y+7	; 0x07
 fc2:	ee 80       	ldd	r14, Y+6	; 0x06
 fc4:	fd 80       	ldd	r15, Y+5	; 0x05
 fc6:	0c 81       	ldd	r16, Y+4	; 0x04
 fc8:	1b 81       	ldd	r17, Y+3	; 0x03
 fca:	aa 81       	ldd	r26, Y+2	; 0x02
 fcc:	b9 81       	ldd	r27, Y+1	; 0x01
 fce:	ce 0f       	add	r28, r30
 fd0:	d1 1d       	adc	r29, r1
 fd2:	0f b6       	in	r0, 0x3f	; 63
 fd4:	f8 94       	cli
 fd6:	de bf       	out	0x3e, r29	; 62
 fd8:	0f be       	out	0x3f, r0	; 63
 fda:	cd bf       	out	0x3d, r28	; 61
 fdc:	ed 01       	movw	r28, r26
 fde:	08 95       	ret

00000fe0 <_exit>:
 fe0:	f8 94       	cli

00000fe2 <__stop_program>:
 fe2:	ff cf       	rjmp	.-2      	; 0xfe2 <__stop_program>
